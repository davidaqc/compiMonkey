Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BEAVERS
    CROCODILE
    MUL
    NEWLINE
    SLEEPING
    WS

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> statement
Rule 2     statement_list -> statement_list statement
Rule 3     statement -> identifier
Rule 4     statement -> expression
Rule 5     statement -> if_statement
Rule 6     statement -> turn
Rule 7     statement -> step
Rule 8     turn -> TURN LEFT
Rule 9     turn -> TURN RIGHT
Rule 10    turn -> TURN NUM_INT
Rule 11    turn -> expression POINT TURNTO expression
Rule 12    turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
Rule 13    turn -> TURNTO BANANA LSQBRACK expression RSQBRACK
Rule 14    turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
Rule 15    turn -> TURNTO MATCH LSQBRACK expression RSQBRACK
Rule 16    turn -> TURNTO expression
Rule 17    step -> STEP expression
Rule 18    step -> STEP MINUS expression
Rule 19    step -> STEP DISTANCETO expression
Rule 20    step -> expression POINT STEP expression
Rule 21    step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
Rule 22    step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
Rule 23    step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
Rule 24    step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
Rule 25    step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
Rule 26    step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
Rule 27    identifier -> IDENTIFIER
Rule 28    primitive -> NUM_INT
Rule 29    primitive -> boolean
Rule 30    expression -> expression PLUS expression
Rule 31    expression -> expression MINUS expression
Rule 32    boolean -> boolean AND boolean
Rule 33    boolean -> boolean OR boolean
Rule 34    boolean -> expression EQ expression
Rule 35    boolean -> expression GT expression
Rule 36    boolean -> expression LT expression
Rule 37    expression -> NOT expression
Rule 38    boolean -> TRUE
Rule 39    boolean -> FALSE
Rule 40    assignable -> primitive
Rule 41    assignable -> expression
Rule 42    arguments -> arguments COMMA expression
Rule 43    arguments -> expression
Rule 44    arguments -> <empty>
Rule 45    expression -> LSQBRACK arguments RSQBRACK
Rule 46    expression -> identifier LSQBRACK expression RSQBRACK
Rule 47    statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression
Rule 48    expression -> identifier EQUALS assignable
Rule 49    if_statement -> IF expression statement_list COMMA
Rule 50    if_statement -> IF expression statement_list ELSE statement_list COMMA
Rule 51    statement -> SAY LPAREN RPAREN
Rule 52    statement -> SEE LPAREN RPAREN
Rule 53    statement -> HEALTH LPAREN RPAREN
Rule 54    expression -> primitive
Rule 55    expression -> identifier
Rule 56    statement -> expression POINT TIMES ARROW_LTR statement_list COMMA
Rule 57    statement -> FOR identifier IN BANANAS statement_list COMMA
Rule 58    statement -> FOR identifier IN TURTLES statement_list COMMA
Rule 59    statement -> FOR identifier IN CROCODILES statement_list COMMA
Rule 60    statement -> FOR identifier IN MATCHES statement_list COMMA
Rule 61    statement -> UNTIL expression statement_list COMMA
Rule 62    statement -> UNTIL NEAR MATCH statement_list COMMA
Rule 63    statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
Rule 64    statement -> RETURN expression
Rule 65    expression -> identifier LPAREN arguments RPAREN
Rule 66    statement -> identifier arguments COMMA

Terminals, with rules where they appear

AND                  : 32
ARROW_LTR            : 56 63
BANANA               : 12 13 23 24
BANANAS              : 57
BEAVER               : 21
BEAVERS              : 
COMMA                : 42 49 50 56 57 58 59 60 61 62 63 66
CROCODILE            : 
CROCODILES           : 59
DISTANCETO           : 19 23 24 25 26
ELSE                 : 50
EQ                   : 34
EQUALS               : 47 48 63
FALSE                : 39
FOR                  : 57 58 59 60
GT                   : 35
HEALTH               : 53
IDENTIFIER           : 27
IF                   : 49 50
IN                   : 57 58 59 60
LEFT                 : 8
LPAREN               : 51 52 53 63 65
LSQBRACK             : 12 13 14 15 21 22 23 24 25 26 45 46 47
LT                   : 36
MATCH                : 14 15 25 26 62
MATCHES              : 60
MINUS                : 18 31
MUL                  : 
NEAR                 : 62
NEWLINE              : 
NOT                  : 37
NUM_INT              : 10 12 14 21 22 23 25 28
OR                   : 33
PLUS                 : 30
POINT                : 11 20 21 22 56
RETURN               : 64
RIGHT                : 9
RPAREN               : 51 52 53 63 65
RSQBRACK             : 12 13 14 15 21 22 23 24 25 26 45 46 47
SAY                  : 51
SEE                  : 52
SLEEPING             : 
STEP                 : 17 18 19 20 21 22 23 24 25 26
TIMES                : 56
TRUE                 : 38
TURN                 : 8 9 10
TURNTO               : 11 12 13 14 15 16
TURTLE               : 22
TURTLES              : 58
UNTIL                : 61 62
WS                   : 
error                : 

Nonterminals, with rules where they appear

arguments            : 42 45 63 65 66
assignable           : 48
boolean              : 29 32 32 33 33
expression           : 4 11 11 13 15 16 17 18 19 20 20 21 22 24 26 30 30 31 31 34 34 35 35 36 36 37 41 42 43 46 47 47 49 50 56 61 64
identifier           : 3 46 47 48 55 57 58 59 60 63 65 66
if_statement         : 5
primitive            : 40 54
statement            : 1 2
statement_list       : 2 49 50 50 56 57 58 59 60 61 62 63 0
step                 : 7
turn                 : 6

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement_list                 shift and go to state 1
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 1

    (0) S' -> statement_list .
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement                      shift and go to state 28
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 2

    (1) statement_list -> statement .

    SAY             reduce using rule 1 (statement_list -> statement .)
    SEE             reduce using rule 1 (statement_list -> statement .)
    HEALTH          reduce using rule 1 (statement_list -> statement .)
    FOR             reduce using rule 1 (statement_list -> statement .)
    UNTIL           reduce using rule 1 (statement_list -> statement .)
    RETURN          reduce using rule 1 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 1 (statement_list -> statement .)
    NOT             reduce using rule 1 (statement_list -> statement .)
    LSQBRACK        reduce using rule 1 (statement_list -> statement .)
    IF              reduce using rule 1 (statement_list -> statement .)
    TURN            reduce using rule 1 (statement_list -> statement .)
    TURNTO          reduce using rule 1 (statement_list -> statement .)
    STEP            reduce using rule 1 (statement_list -> statement .)
    BEAVER          reduce using rule 1 (statement_list -> statement .)
    TURTLE          reduce using rule 1 (statement_list -> statement .)
    NUM_INT         reduce using rule 1 (statement_list -> statement .)
    TRUE            reduce using rule 1 (statement_list -> statement .)
    FALSE           reduce using rule 1 (statement_list -> statement .)
    $end            reduce using rule 1 (statement_list -> statement .)
    COMMA           reduce using rule 1 (statement_list -> statement .)
    ELSE            reduce using rule 1 (statement_list -> statement .)


state 3

    (3) statement -> identifier .
    (47) statement -> identifier . LSQBRACK expression RSQBRACK EQUALS expression
    (63) statement -> identifier . EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (66) statement -> identifier . arguments COMMA
    (46) expression -> identifier . LSQBRACK expression RSQBRACK
    (48) expression -> identifier . EQUALS assignable
    (55) expression -> identifier .
    (65) expression -> identifier . LPAREN arguments RPAREN
    (42) arguments -> . arguments COMMA expression
    (43) arguments -> . expression
    (44) arguments -> .
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for SAY resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for SEE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for HEALTH resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for UNTIL resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 3 (statement -> identifier .)
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for TURN resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for TURNTO resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for STEP resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for BEAVER resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for TURTLE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 3 (statement -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 3 (statement -> identifier .)
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SAY             reduce using rule 3 (statement -> identifier .)
    SEE             reduce using rule 3 (statement -> identifier .)
    HEALTH          reduce using rule 3 (statement -> identifier .)
    FOR             reduce using rule 3 (statement -> identifier .)
    UNTIL           reduce using rule 3 (statement -> identifier .)
    RETURN          reduce using rule 3 (statement -> identifier .)
    IF              reduce using rule 3 (statement -> identifier .)
    TURN            reduce using rule 3 (statement -> identifier .)
    TURNTO          reduce using rule 3 (statement -> identifier .)
    STEP            reduce using rule 3 (statement -> identifier .)
    BEAVER          reduce using rule 3 (statement -> identifier .)
    TURTLE          reduce using rule 3 (statement -> identifier .)
    $end            reduce using rule 3 (statement -> identifier .)
    COMMA           reduce using rule 3 (statement -> identifier .)
    ELSE            reduce using rule 3 (statement -> identifier .)
    LSQBRACK        shift and go to state 30
    EQUALS          shift and go to state 32
    POINT           reduce using rule 55 (expression -> identifier .)
    PLUS            reduce using rule 55 (expression -> identifier .)
    MINUS           reduce using rule 55 (expression -> identifier .)
    EQ              reduce using rule 55 (expression -> identifier .)
    GT              reduce using rule 55 (expression -> identifier .)
    LT              reduce using rule 55 (expression -> identifier .)
    LPAREN          shift and go to state 33
    NOT             shift and go to state 16
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! IDENTIFIER      [ reduce using rule 3 (statement -> identifier .) ]
  ! NOT             [ reduce using rule 3 (statement -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 3 (statement -> identifier .) ]
  ! NUM_INT         [ reduce using rule 3 (statement -> identifier .) ]
  ! TRUE            [ reduce using rule 3 (statement -> identifier .) ]
  ! FALSE           [ reduce using rule 3 (statement -> identifier .) ]
  ! SAY             [ reduce using rule 55 (expression -> identifier .) ]
  ! SEE             [ reduce using rule 55 (expression -> identifier .) ]
  ! HEALTH          [ reduce using rule 55 (expression -> identifier .) ]
  ! FOR             [ reduce using rule 55 (expression -> identifier .) ]
  ! UNTIL           [ reduce using rule 55 (expression -> identifier .) ]
  ! RETURN          [ reduce using rule 55 (expression -> identifier .) ]
  ! IDENTIFIER      [ reduce using rule 55 (expression -> identifier .) ]
  ! NOT             [ reduce using rule 55 (expression -> identifier .) ]
  ! LSQBRACK        [ reduce using rule 55 (expression -> identifier .) ]
  ! IF              [ reduce using rule 55 (expression -> identifier .) ]
  ! TURN            [ reduce using rule 55 (expression -> identifier .) ]
  ! TURNTO          [ reduce using rule 55 (expression -> identifier .) ]
  ! STEP            [ reduce using rule 55 (expression -> identifier .) ]
  ! BEAVER          [ reduce using rule 55 (expression -> identifier .) ]
  ! TURTLE          [ reduce using rule 55 (expression -> identifier .) ]
  ! NUM_INT         [ reduce using rule 55 (expression -> identifier .) ]
  ! TRUE            [ reduce using rule 55 (expression -> identifier .) ]
  ! FALSE           [ reduce using rule 55 (expression -> identifier .) ]
  ! $end            [ reduce using rule 55 (expression -> identifier .) ]
  ! COMMA           [ reduce using rule 55 (expression -> identifier .) ]
  ! ELSE            [ reduce using rule 55 (expression -> identifier .) ]
  ! COMMA           [ reduce using rule 44 (arguments -> .) ]

    identifier                     shift and go to state 29
    expression                     shift and go to state 31
    arguments                      shift and go to state 34
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 4

    (4) statement -> expression .
    (56) statement -> expression . POINT TIMES ARROW_LTR statement_list COMMA
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (11) turn -> expression . POINT TURNTO expression
    (20) step -> expression . POINT STEP expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 4 (statement -> expression .)
    SEE             reduce using rule 4 (statement -> expression .)
    HEALTH          reduce using rule 4 (statement -> expression .)
    FOR             reduce using rule 4 (statement -> expression .)
    UNTIL           reduce using rule 4 (statement -> expression .)
    RETURN          reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    NOT             reduce using rule 4 (statement -> expression .)
    LSQBRACK        reduce using rule 4 (statement -> expression .)
    IF              reduce using rule 4 (statement -> expression .)
    TURN            reduce using rule 4 (statement -> expression .)
    TURNTO          reduce using rule 4 (statement -> expression .)
    STEP            reduce using rule 4 (statement -> expression .)
    BEAVER          reduce using rule 4 (statement -> expression .)
    TURTLE          reduce using rule 4 (statement -> expression .)
    NUM_INT         reduce using rule 4 (statement -> expression .)
    TRUE            reduce using rule 4 (statement -> expression .)
    FALSE           reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    COMMA           reduce using rule 4 (statement -> expression .)
    ELSE            reduce using rule 4 (statement -> expression .)
    POINT           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 5

    (5) statement -> if_statement .

    SAY             reduce using rule 5 (statement -> if_statement .)
    SEE             reduce using rule 5 (statement -> if_statement .)
    HEALTH          reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    UNTIL           reduce using rule 5 (statement -> if_statement .)
    RETURN          reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    NOT             reduce using rule 5 (statement -> if_statement .)
    LSQBRACK        reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    TURN            reduce using rule 5 (statement -> if_statement .)
    TURNTO          reduce using rule 5 (statement -> if_statement .)
    STEP            reduce using rule 5 (statement -> if_statement .)
    BEAVER          reduce using rule 5 (statement -> if_statement .)
    TURTLE          reduce using rule 5 (statement -> if_statement .)
    NUM_INT         reduce using rule 5 (statement -> if_statement .)
    TRUE            reduce using rule 5 (statement -> if_statement .)
    FALSE           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    COMMA           reduce using rule 5 (statement -> if_statement .)
    ELSE            reduce using rule 5 (statement -> if_statement .)


state 6

    (6) statement -> turn .

    SAY             reduce using rule 6 (statement -> turn .)
    SEE             reduce using rule 6 (statement -> turn .)
    HEALTH          reduce using rule 6 (statement -> turn .)
    FOR             reduce using rule 6 (statement -> turn .)
    UNTIL           reduce using rule 6 (statement -> turn .)
    RETURN          reduce using rule 6 (statement -> turn .)
    IDENTIFIER      reduce using rule 6 (statement -> turn .)
    NOT             reduce using rule 6 (statement -> turn .)
    LSQBRACK        reduce using rule 6 (statement -> turn .)
    IF              reduce using rule 6 (statement -> turn .)
    TURN            reduce using rule 6 (statement -> turn .)
    TURNTO          reduce using rule 6 (statement -> turn .)
    STEP            reduce using rule 6 (statement -> turn .)
    BEAVER          reduce using rule 6 (statement -> turn .)
    TURTLE          reduce using rule 6 (statement -> turn .)
    NUM_INT         reduce using rule 6 (statement -> turn .)
    TRUE            reduce using rule 6 (statement -> turn .)
    FALSE           reduce using rule 6 (statement -> turn .)
    $end            reduce using rule 6 (statement -> turn .)
    COMMA           reduce using rule 6 (statement -> turn .)
    ELSE            reduce using rule 6 (statement -> turn .)


state 7

    (7) statement -> step .

    SAY             reduce using rule 7 (statement -> step .)
    SEE             reduce using rule 7 (statement -> step .)
    HEALTH          reduce using rule 7 (statement -> step .)
    FOR             reduce using rule 7 (statement -> step .)
    UNTIL           reduce using rule 7 (statement -> step .)
    RETURN          reduce using rule 7 (statement -> step .)
    IDENTIFIER      reduce using rule 7 (statement -> step .)
    NOT             reduce using rule 7 (statement -> step .)
    LSQBRACK        reduce using rule 7 (statement -> step .)
    IF              reduce using rule 7 (statement -> step .)
    TURN            reduce using rule 7 (statement -> step .)
    TURNTO          reduce using rule 7 (statement -> step .)
    STEP            reduce using rule 7 (statement -> step .)
    BEAVER          reduce using rule 7 (statement -> step .)
    TURTLE          reduce using rule 7 (statement -> step .)
    NUM_INT         reduce using rule 7 (statement -> step .)
    TRUE            reduce using rule 7 (statement -> step .)
    FALSE           reduce using rule 7 (statement -> step .)
    $end            reduce using rule 7 (statement -> step .)
    COMMA           reduce using rule 7 (statement -> step .)
    ELSE            reduce using rule 7 (statement -> step .)


state 8

    (45) expression -> LSQBRACK . arguments RSQBRACK
    (42) arguments -> . arguments COMMA expression
    (43) arguments -> . expression
    (44) arguments -> .
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    RSQBRACK        reduce using rule 44 (arguments -> .)
    COMMA           reduce using rule 44 (arguments -> .)
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    arguments                      shift and go to state 41
    expression                     shift and go to state 31
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 9

    (51) statement -> SAY . LPAREN RPAREN

    LPAREN          shift and go to state 42


state 10

    (52) statement -> SEE . LPAREN RPAREN

    LPAREN          shift and go to state 43


state 11

    (53) statement -> HEALTH . LPAREN RPAREN

    LPAREN          shift and go to state 44


state 12

    (57) statement -> FOR . identifier IN BANANAS statement_list COMMA
    (58) statement -> FOR . identifier IN TURTLES statement_list COMMA
    (59) statement -> FOR . identifier IN CROCODILES statement_list COMMA
    (60) statement -> FOR . identifier IN MATCHES statement_list COMMA
    (27) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 45

state 13

    (61) statement -> UNTIL . expression statement_list COMMA
    (62) statement -> UNTIL . NEAR MATCH statement_list COMMA
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NEAR            shift and go to state 47
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 46
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 14

    (64) statement -> RETURN . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 48
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 15

    (27) identifier -> IDENTIFIER .

    LSQBRACK        reduce using rule 27 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 27 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 27 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 27 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 27 (identifier -> IDENTIFIER .)
    NUM_INT         reduce using rule 27 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 27 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 27 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 27 (identifier -> IDENTIFIER .)
    SAY             reduce using rule 27 (identifier -> IDENTIFIER .)
    SEE             reduce using rule 27 (identifier -> IDENTIFIER .)
    HEALTH          reduce using rule 27 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 27 (identifier -> IDENTIFIER .)
    UNTIL           reduce using rule 27 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 27 (identifier -> IDENTIFIER .)
    IF              reduce using rule 27 (identifier -> IDENTIFIER .)
    TURN            reduce using rule 27 (identifier -> IDENTIFIER .)
    TURNTO          reduce using rule 27 (identifier -> IDENTIFIER .)
    STEP            reduce using rule 27 (identifier -> IDENTIFIER .)
    BEAVER          reduce using rule 27 (identifier -> IDENTIFIER .)
    TURTLE          reduce using rule 27 (identifier -> IDENTIFIER .)
    $end            reduce using rule 27 (identifier -> IDENTIFIER .)
    POINT           reduce using rule 27 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 27 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 27 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 27 (identifier -> IDENTIFIER .)
    GT              reduce using rule 27 (identifier -> IDENTIFIER .)
    LT              reduce using rule 27 (identifier -> IDENTIFIER .)
    RSQBRACK        reduce using rule 27 (identifier -> IDENTIFIER .)
    IN              reduce using rule 27 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 27 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (identifier -> IDENTIFIER .)
    AND             reduce using rule 27 (identifier -> IDENTIFIER .)
    OR              reduce using rule 27 (identifier -> IDENTIFIER .)


state 16

    (37) expression -> NOT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 49
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 17

    (54) expression -> primitive .

    POINT           reduce using rule 54 (expression -> primitive .)
    PLUS            reduce using rule 54 (expression -> primitive .)
    MINUS           reduce using rule 54 (expression -> primitive .)
    EQ              reduce using rule 54 (expression -> primitive .)
    GT              reduce using rule 54 (expression -> primitive .)
    LT              reduce using rule 54 (expression -> primitive .)
    SAY             reduce using rule 54 (expression -> primitive .)
    SEE             reduce using rule 54 (expression -> primitive .)
    HEALTH          reduce using rule 54 (expression -> primitive .)
    FOR             reduce using rule 54 (expression -> primitive .)
    UNTIL           reduce using rule 54 (expression -> primitive .)
    RETURN          reduce using rule 54 (expression -> primitive .)
    IDENTIFIER      reduce using rule 54 (expression -> primitive .)
    NOT             reduce using rule 54 (expression -> primitive .)
    LSQBRACK        reduce using rule 54 (expression -> primitive .)
    IF              reduce using rule 54 (expression -> primitive .)
    TURN            reduce using rule 54 (expression -> primitive .)
    TURNTO          reduce using rule 54 (expression -> primitive .)
    STEP            reduce using rule 54 (expression -> primitive .)
    BEAVER          reduce using rule 54 (expression -> primitive .)
    TURTLE          reduce using rule 54 (expression -> primitive .)
    NUM_INT         reduce using rule 54 (expression -> primitive .)
    TRUE            reduce using rule 54 (expression -> primitive .)
    FALSE           reduce using rule 54 (expression -> primitive .)
    $end            reduce using rule 54 (expression -> primitive .)
    COMMA           reduce using rule 54 (expression -> primitive .)
    RSQBRACK        reduce using rule 54 (expression -> primitive .)
    ELSE            reduce using rule 54 (expression -> primitive .)
    RPAREN          reduce using rule 54 (expression -> primitive .)
    AND             reduce using rule 54 (expression -> primitive .)
    OR              reduce using rule 54 (expression -> primitive .)


state 18

    (49) if_statement -> IF . expression statement_list COMMA
    (50) if_statement -> IF . expression statement_list ELSE statement_list COMMA
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 50
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 19

    (8) turn -> TURN . LEFT
    (9) turn -> TURN . RIGHT
    (10) turn -> TURN . NUM_INT

    LEFT            shift and go to state 51
    RIGHT           shift and go to state 52
    NUM_INT         shift and go to state 53


state 20

    (28) primitive -> NUM_INT .

    POINT           reduce using rule 28 (primitive -> NUM_INT .)
    PLUS            reduce using rule 28 (primitive -> NUM_INT .)
    MINUS           reduce using rule 28 (primitive -> NUM_INT .)
    EQ              reduce using rule 28 (primitive -> NUM_INT .)
    GT              reduce using rule 28 (primitive -> NUM_INT .)
    LT              reduce using rule 28 (primitive -> NUM_INT .)
    SAY             reduce using rule 28 (primitive -> NUM_INT .)
    SEE             reduce using rule 28 (primitive -> NUM_INT .)
    HEALTH          reduce using rule 28 (primitive -> NUM_INT .)
    FOR             reduce using rule 28 (primitive -> NUM_INT .)
    UNTIL           reduce using rule 28 (primitive -> NUM_INT .)
    RETURN          reduce using rule 28 (primitive -> NUM_INT .)
    IDENTIFIER      reduce using rule 28 (primitive -> NUM_INT .)
    NOT             reduce using rule 28 (primitive -> NUM_INT .)
    LSQBRACK        reduce using rule 28 (primitive -> NUM_INT .)
    IF              reduce using rule 28 (primitive -> NUM_INT .)
    TURN            reduce using rule 28 (primitive -> NUM_INT .)
    TURNTO          reduce using rule 28 (primitive -> NUM_INT .)
    STEP            reduce using rule 28 (primitive -> NUM_INT .)
    BEAVER          reduce using rule 28 (primitive -> NUM_INT .)
    TURTLE          reduce using rule 28 (primitive -> NUM_INT .)
    NUM_INT         reduce using rule 28 (primitive -> NUM_INT .)
    TRUE            reduce using rule 28 (primitive -> NUM_INT .)
    FALSE           reduce using rule 28 (primitive -> NUM_INT .)
    $end            reduce using rule 28 (primitive -> NUM_INT .)
    COMMA           reduce using rule 28 (primitive -> NUM_INT .)
    RSQBRACK        reduce using rule 28 (primitive -> NUM_INT .)
    ELSE            reduce using rule 28 (primitive -> NUM_INT .)
    RPAREN          reduce using rule 28 (primitive -> NUM_INT .)
    AND             reduce using rule 28 (primitive -> NUM_INT .)
    OR              reduce using rule 28 (primitive -> NUM_INT .)


state 21

    (12) turn -> TURNTO . BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> TURNTO . BANANA LSQBRACK expression RSQBRACK
    (14) turn -> TURNTO . MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> TURNTO . MATCH LSQBRACK expression RSQBRACK
    (16) turn -> TURNTO . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    BANANA          shift and go to state 54
    MATCH           shift and go to state 56
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 55
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 22

    (17) step -> STEP . expression
    (18) step -> STEP . MINUS expression
    (19) step -> STEP . DISTANCETO expression
    (23) step -> STEP . DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> STEP . DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> STEP . DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> STEP . DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    MINUS           shift and go to state 58
    DISTANCETO      shift and go to state 59
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 57
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 23

    (21) step -> BEAVER . LSQBRACK NUM_INT RSQBRACK POINT STEP expression

    LSQBRACK        shift and go to state 60


state 24

    (22) step -> TURTLE . LSQBRACK NUM_INT RSQBRACK POINT STEP expression

    LSQBRACK        shift and go to state 61


state 25

    (29) primitive -> boolean .
    (32) boolean -> boolean . AND boolean
    (33) boolean -> boolean . OR boolean

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    POINT           reduce using rule 29 (primitive -> boolean .)
    PLUS            reduce using rule 29 (primitive -> boolean .)
    MINUS           reduce using rule 29 (primitive -> boolean .)
    EQ              reduce using rule 29 (primitive -> boolean .)
    GT              reduce using rule 29 (primitive -> boolean .)
    LT              reduce using rule 29 (primitive -> boolean .)
    SAY             reduce using rule 29 (primitive -> boolean .)
    SEE             reduce using rule 29 (primitive -> boolean .)
    HEALTH          reduce using rule 29 (primitive -> boolean .)
    FOR             reduce using rule 29 (primitive -> boolean .)
    UNTIL           reduce using rule 29 (primitive -> boolean .)
    RETURN          reduce using rule 29 (primitive -> boolean .)
    IDENTIFIER      reduce using rule 29 (primitive -> boolean .)
    NOT             reduce using rule 29 (primitive -> boolean .)
    LSQBRACK        reduce using rule 29 (primitive -> boolean .)
    IF              reduce using rule 29 (primitive -> boolean .)
    TURN            reduce using rule 29 (primitive -> boolean .)
    TURNTO          reduce using rule 29 (primitive -> boolean .)
    STEP            reduce using rule 29 (primitive -> boolean .)
    BEAVER          reduce using rule 29 (primitive -> boolean .)
    TURTLE          reduce using rule 29 (primitive -> boolean .)
    NUM_INT         reduce using rule 29 (primitive -> boolean .)
    TRUE            reduce using rule 29 (primitive -> boolean .)
    FALSE           reduce using rule 29 (primitive -> boolean .)
    $end            reduce using rule 29 (primitive -> boolean .)
    COMMA           reduce using rule 29 (primitive -> boolean .)
    RSQBRACK        reduce using rule 29 (primitive -> boolean .)
    ELSE            reduce using rule 29 (primitive -> boolean .)
    RPAREN          reduce using rule 29 (primitive -> boolean .)
    AND             shift and go to state 62
    OR              shift and go to state 63

  ! AND             [ reduce using rule 29 (primitive -> boolean .) ]
  ! OR              [ reduce using rule 29 (primitive -> boolean .) ]


state 26

    (38) boolean -> TRUE .

    AND             reduce using rule 38 (boolean -> TRUE .)
    OR              reduce using rule 38 (boolean -> TRUE .)
    POINT           reduce using rule 38 (boolean -> TRUE .)
    PLUS            reduce using rule 38 (boolean -> TRUE .)
    MINUS           reduce using rule 38 (boolean -> TRUE .)
    EQ              reduce using rule 38 (boolean -> TRUE .)
    GT              reduce using rule 38 (boolean -> TRUE .)
    LT              reduce using rule 38 (boolean -> TRUE .)
    SAY             reduce using rule 38 (boolean -> TRUE .)
    SEE             reduce using rule 38 (boolean -> TRUE .)
    HEALTH          reduce using rule 38 (boolean -> TRUE .)
    FOR             reduce using rule 38 (boolean -> TRUE .)
    UNTIL           reduce using rule 38 (boolean -> TRUE .)
    RETURN          reduce using rule 38 (boolean -> TRUE .)
    IDENTIFIER      reduce using rule 38 (boolean -> TRUE .)
    NOT             reduce using rule 38 (boolean -> TRUE .)
    LSQBRACK        reduce using rule 38 (boolean -> TRUE .)
    IF              reduce using rule 38 (boolean -> TRUE .)
    TURN            reduce using rule 38 (boolean -> TRUE .)
    TURNTO          reduce using rule 38 (boolean -> TRUE .)
    STEP            reduce using rule 38 (boolean -> TRUE .)
    BEAVER          reduce using rule 38 (boolean -> TRUE .)
    TURTLE          reduce using rule 38 (boolean -> TRUE .)
    NUM_INT         reduce using rule 38 (boolean -> TRUE .)
    TRUE            reduce using rule 38 (boolean -> TRUE .)
    FALSE           reduce using rule 38 (boolean -> TRUE .)
    $end            reduce using rule 38 (boolean -> TRUE .)
    COMMA           reduce using rule 38 (boolean -> TRUE .)
    RSQBRACK        reduce using rule 38 (boolean -> TRUE .)
    ELSE            reduce using rule 38 (boolean -> TRUE .)
    RPAREN          reduce using rule 38 (boolean -> TRUE .)


state 27

    (39) boolean -> FALSE .

    AND             reduce using rule 39 (boolean -> FALSE .)
    OR              reduce using rule 39 (boolean -> FALSE .)
    POINT           reduce using rule 39 (boolean -> FALSE .)
    PLUS            reduce using rule 39 (boolean -> FALSE .)
    MINUS           reduce using rule 39 (boolean -> FALSE .)
    EQ              reduce using rule 39 (boolean -> FALSE .)
    GT              reduce using rule 39 (boolean -> FALSE .)
    LT              reduce using rule 39 (boolean -> FALSE .)
    SAY             reduce using rule 39 (boolean -> FALSE .)
    SEE             reduce using rule 39 (boolean -> FALSE .)
    HEALTH          reduce using rule 39 (boolean -> FALSE .)
    FOR             reduce using rule 39 (boolean -> FALSE .)
    UNTIL           reduce using rule 39 (boolean -> FALSE .)
    RETURN          reduce using rule 39 (boolean -> FALSE .)
    IDENTIFIER      reduce using rule 39 (boolean -> FALSE .)
    NOT             reduce using rule 39 (boolean -> FALSE .)
    LSQBRACK        reduce using rule 39 (boolean -> FALSE .)
    IF              reduce using rule 39 (boolean -> FALSE .)
    TURN            reduce using rule 39 (boolean -> FALSE .)
    TURNTO          reduce using rule 39 (boolean -> FALSE .)
    STEP            reduce using rule 39 (boolean -> FALSE .)
    BEAVER          reduce using rule 39 (boolean -> FALSE .)
    TURTLE          reduce using rule 39 (boolean -> FALSE .)
    NUM_INT         reduce using rule 39 (boolean -> FALSE .)
    TRUE            reduce using rule 39 (boolean -> FALSE .)
    FALSE           reduce using rule 39 (boolean -> FALSE .)
    $end            reduce using rule 39 (boolean -> FALSE .)
    COMMA           reduce using rule 39 (boolean -> FALSE .)
    RSQBRACK        reduce using rule 39 (boolean -> FALSE .)
    ELSE            reduce using rule 39 (boolean -> FALSE .)
    RPAREN          reduce using rule 39 (boolean -> FALSE .)


state 28

    (2) statement_list -> statement_list statement .

    SAY             reduce using rule 2 (statement_list -> statement_list statement .)
    SEE             reduce using rule 2 (statement_list -> statement_list statement .)
    HEALTH          reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    LSQBRACK        reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    TURN            reduce using rule 2 (statement_list -> statement_list statement .)
    TURNTO          reduce using rule 2 (statement_list -> statement_list statement .)
    STEP            reduce using rule 2 (statement_list -> statement_list statement .)
    BEAVER          reduce using rule 2 (statement_list -> statement_list statement .)
    TURTLE          reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    COMMA           reduce using rule 2 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 2 (statement_list -> statement_list statement .)


state 29

    (46) expression -> identifier . LSQBRACK expression RSQBRACK
    (48) expression -> identifier . EQUALS assignable
    (55) expression -> identifier .
    (65) expression -> identifier . LPAREN arguments RPAREN

  ! shift/reduce conflict for LSQBRACK resolved as shift
    LSQBRACK        shift and go to state 64
    EQUALS          shift and go to state 65
    PLUS            reduce using rule 55 (expression -> identifier .)
    MINUS           reduce using rule 55 (expression -> identifier .)
    EQ              reduce using rule 55 (expression -> identifier .)
    GT              reduce using rule 55 (expression -> identifier .)
    LT              reduce using rule 55 (expression -> identifier .)
    COMMA           reduce using rule 55 (expression -> identifier .)
    RSQBRACK        reduce using rule 55 (expression -> identifier .)
    SAY             reduce using rule 55 (expression -> identifier .)
    SEE             reduce using rule 55 (expression -> identifier .)
    HEALTH          reduce using rule 55 (expression -> identifier .)
    FOR             reduce using rule 55 (expression -> identifier .)
    UNTIL           reduce using rule 55 (expression -> identifier .)
    RETURN          reduce using rule 55 (expression -> identifier .)
    IDENTIFIER      reduce using rule 55 (expression -> identifier .)
    NOT             reduce using rule 55 (expression -> identifier .)
    IF              reduce using rule 55 (expression -> identifier .)
    TURN            reduce using rule 55 (expression -> identifier .)
    TURNTO          reduce using rule 55 (expression -> identifier .)
    STEP            reduce using rule 55 (expression -> identifier .)
    BEAVER          reduce using rule 55 (expression -> identifier .)
    TURTLE          reduce using rule 55 (expression -> identifier .)
    NUM_INT         reduce using rule 55 (expression -> identifier .)
    TRUE            reduce using rule 55 (expression -> identifier .)
    FALSE           reduce using rule 55 (expression -> identifier .)
    $end            reduce using rule 55 (expression -> identifier .)
    ELSE            reduce using rule 55 (expression -> identifier .)
    POINT           reduce using rule 55 (expression -> identifier .)
    RPAREN          reduce using rule 55 (expression -> identifier .)
    AND             reduce using rule 55 (expression -> identifier .)
    OR              reduce using rule 55 (expression -> identifier .)
    LPAREN          shift and go to state 33

  ! LSQBRACK        [ reduce using rule 55 (expression -> identifier .) ]


state 30

    (47) statement -> identifier LSQBRACK . expression RSQBRACK EQUALS expression
    (46) expression -> identifier LSQBRACK . expression RSQBRACK
    (45) expression -> LSQBRACK . arguments RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (42) arguments -> . arguments COMMA expression
    (43) arguments -> . expression
    (44) arguments -> .
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    RSQBRACK        reduce using rule 44 (arguments -> .)
    COMMA           reduce using rule 44 (arguments -> .)
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 29
    expression                     shift and go to state 66
    arguments                      shift and go to state 41
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 31

    (43) arguments -> expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    COMMA           reduce using rule 43 (arguments -> expression .)
    RSQBRACK        reduce using rule 43 (arguments -> expression .)
    RPAREN          reduce using rule 43 (arguments -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 32

    (63) statement -> identifier EQUALS . LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (48) expression -> identifier EQUALS . assignable
    (40) assignable -> . primitive
    (41) assignable -> . expression
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (27) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 67
    NUM_INT         shift and go to state 20
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 29
    assignable                     shift and go to state 68
    primitive                      shift and go to state 69
    expression                     shift and go to state 70
    boolean                        shift and go to state 25

state 33

    (65) expression -> identifier LPAREN . arguments RPAREN
    (42) arguments -> . arguments COMMA expression
    (43) arguments -> . expression
    (44) arguments -> .
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    RPAREN          reduce using rule 44 (arguments -> .)
    COMMA           reduce using rule 44 (arguments -> .)
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 29
    arguments                      shift and go to state 71
    expression                     shift and go to state 31
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 34

    (66) statement -> identifier arguments . COMMA
    (42) arguments -> arguments . COMMA expression

    COMMA           shift and go to state 72


state 35

    (56) statement -> expression POINT . TIMES ARROW_LTR statement_list COMMA
    (11) turn -> expression POINT . TURNTO expression
    (20) step -> expression POINT . STEP expression

    TIMES           shift and go to state 73
    TURNTO          shift and go to state 74
    STEP            shift and go to state 75


state 36

    (30) expression -> expression PLUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 76
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 37

    (31) expression -> expression MINUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 77
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 38

    (34) boolean -> expression EQ . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 78
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 39

    (35) boolean -> expression GT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 79
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 40

    (36) boolean -> expression LT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 80
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 41

    (45) expression -> LSQBRACK arguments . RSQBRACK
    (42) arguments -> arguments . COMMA expression

    RSQBRACK        shift and go to state 81
    COMMA           shift and go to state 82


state 42

    (51) statement -> SAY LPAREN . RPAREN

    RPAREN          shift and go to state 83


state 43

    (52) statement -> SEE LPAREN . RPAREN

    RPAREN          shift and go to state 84


state 44

    (53) statement -> HEALTH LPAREN . RPAREN

    RPAREN          shift and go to state 85


state 45

    (57) statement -> FOR identifier . IN BANANAS statement_list COMMA
    (58) statement -> FOR identifier . IN TURTLES statement_list COMMA
    (59) statement -> FOR identifier . IN CROCODILES statement_list COMMA
    (60) statement -> FOR identifier . IN MATCHES statement_list COMMA

    IN              shift and go to state 86


state 46

    (61) statement -> UNTIL expression . statement_list COMMA
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement_list                 shift and go to state 87
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 47

    (62) statement -> UNTIL NEAR . MATCH statement_list COMMA

    MATCH           shift and go to state 88


state 48

    (64) statement -> RETURN expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 64 (statement -> RETURN expression .)
    SEE             reduce using rule 64 (statement -> RETURN expression .)
    HEALTH          reduce using rule 64 (statement -> RETURN expression .)
    FOR             reduce using rule 64 (statement -> RETURN expression .)
    UNTIL           reduce using rule 64 (statement -> RETURN expression .)
    RETURN          reduce using rule 64 (statement -> RETURN expression .)
    IDENTIFIER      reduce using rule 64 (statement -> RETURN expression .)
    NOT             reduce using rule 64 (statement -> RETURN expression .)
    LSQBRACK        reduce using rule 64 (statement -> RETURN expression .)
    IF              reduce using rule 64 (statement -> RETURN expression .)
    TURN            reduce using rule 64 (statement -> RETURN expression .)
    TURNTO          reduce using rule 64 (statement -> RETURN expression .)
    STEP            reduce using rule 64 (statement -> RETURN expression .)
    BEAVER          reduce using rule 64 (statement -> RETURN expression .)
    TURTLE          reduce using rule 64 (statement -> RETURN expression .)
    NUM_INT         reduce using rule 64 (statement -> RETURN expression .)
    TRUE            reduce using rule 64 (statement -> RETURN expression .)
    FALSE           reduce using rule 64 (statement -> RETURN expression .)
    $end            reduce using rule 64 (statement -> RETURN expression .)
    COMMA           reduce using rule 64 (statement -> RETURN expression .)
    ELSE            reduce using rule 64 (statement -> RETURN expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 49

    (37) expression -> NOT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    POINT           reduce using rule 37 (expression -> NOT expression .)
    SAY             reduce using rule 37 (expression -> NOT expression .)
    SEE             reduce using rule 37 (expression -> NOT expression .)
    HEALTH          reduce using rule 37 (expression -> NOT expression .)
    FOR             reduce using rule 37 (expression -> NOT expression .)
    UNTIL           reduce using rule 37 (expression -> NOT expression .)
    RETURN          reduce using rule 37 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 37 (expression -> NOT expression .)
    NOT             reduce using rule 37 (expression -> NOT expression .)
    LSQBRACK        reduce using rule 37 (expression -> NOT expression .)
    IF              reduce using rule 37 (expression -> NOT expression .)
    TURN            reduce using rule 37 (expression -> NOT expression .)
    TURNTO          reduce using rule 37 (expression -> NOT expression .)
    STEP            reduce using rule 37 (expression -> NOT expression .)
    BEAVER          reduce using rule 37 (expression -> NOT expression .)
    TURTLE          reduce using rule 37 (expression -> NOT expression .)
    NUM_INT         reduce using rule 37 (expression -> NOT expression .)
    TRUE            reduce using rule 37 (expression -> NOT expression .)
    FALSE           reduce using rule 37 (expression -> NOT expression .)
    $end            reduce using rule 37 (expression -> NOT expression .)
    COMMA           reduce using rule 37 (expression -> NOT expression .)
    RSQBRACK        reduce using rule 37 (expression -> NOT expression .)
    ELSE            reduce using rule 37 (expression -> NOT expression .)
    RPAREN          reduce using rule 37 (expression -> NOT expression .)
    AND             reduce using rule 37 (expression -> NOT expression .)
    OR              reduce using rule 37 (expression -> NOT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40

  ! PLUS            [ reduce using rule 37 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 37 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 37 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 37 (expression -> NOT expression .) ]


state 50

    (49) if_statement -> IF expression . statement_list COMMA
    (50) if_statement -> IF expression . statement_list ELSE statement_list COMMA
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement_list                 shift and go to state 89
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 51

    (8) turn -> TURN LEFT .

    SAY             reduce using rule 8 (turn -> TURN LEFT .)
    SEE             reduce using rule 8 (turn -> TURN LEFT .)
    HEALTH          reduce using rule 8 (turn -> TURN LEFT .)
    FOR             reduce using rule 8 (turn -> TURN LEFT .)
    UNTIL           reduce using rule 8 (turn -> TURN LEFT .)
    RETURN          reduce using rule 8 (turn -> TURN LEFT .)
    IDENTIFIER      reduce using rule 8 (turn -> TURN LEFT .)
    NOT             reduce using rule 8 (turn -> TURN LEFT .)
    LSQBRACK        reduce using rule 8 (turn -> TURN LEFT .)
    IF              reduce using rule 8 (turn -> TURN LEFT .)
    TURN            reduce using rule 8 (turn -> TURN LEFT .)
    TURNTO          reduce using rule 8 (turn -> TURN LEFT .)
    STEP            reduce using rule 8 (turn -> TURN LEFT .)
    BEAVER          reduce using rule 8 (turn -> TURN LEFT .)
    TURTLE          reduce using rule 8 (turn -> TURN LEFT .)
    NUM_INT         reduce using rule 8 (turn -> TURN LEFT .)
    TRUE            reduce using rule 8 (turn -> TURN LEFT .)
    FALSE           reduce using rule 8 (turn -> TURN LEFT .)
    $end            reduce using rule 8 (turn -> TURN LEFT .)
    COMMA           reduce using rule 8 (turn -> TURN LEFT .)
    ELSE            reduce using rule 8 (turn -> TURN LEFT .)


state 52

    (9) turn -> TURN RIGHT .

    SAY             reduce using rule 9 (turn -> TURN RIGHT .)
    SEE             reduce using rule 9 (turn -> TURN RIGHT .)
    HEALTH          reduce using rule 9 (turn -> TURN RIGHT .)
    FOR             reduce using rule 9 (turn -> TURN RIGHT .)
    UNTIL           reduce using rule 9 (turn -> TURN RIGHT .)
    RETURN          reduce using rule 9 (turn -> TURN RIGHT .)
    IDENTIFIER      reduce using rule 9 (turn -> TURN RIGHT .)
    NOT             reduce using rule 9 (turn -> TURN RIGHT .)
    LSQBRACK        reduce using rule 9 (turn -> TURN RIGHT .)
    IF              reduce using rule 9 (turn -> TURN RIGHT .)
    TURN            reduce using rule 9 (turn -> TURN RIGHT .)
    TURNTO          reduce using rule 9 (turn -> TURN RIGHT .)
    STEP            reduce using rule 9 (turn -> TURN RIGHT .)
    BEAVER          reduce using rule 9 (turn -> TURN RIGHT .)
    TURTLE          reduce using rule 9 (turn -> TURN RIGHT .)
    NUM_INT         reduce using rule 9 (turn -> TURN RIGHT .)
    TRUE            reduce using rule 9 (turn -> TURN RIGHT .)
    FALSE           reduce using rule 9 (turn -> TURN RIGHT .)
    $end            reduce using rule 9 (turn -> TURN RIGHT .)
    COMMA           reduce using rule 9 (turn -> TURN RIGHT .)
    ELSE            reduce using rule 9 (turn -> TURN RIGHT .)


state 53

    (10) turn -> TURN NUM_INT .

    SAY             reduce using rule 10 (turn -> TURN NUM_INT .)
    SEE             reduce using rule 10 (turn -> TURN NUM_INT .)
    HEALTH          reduce using rule 10 (turn -> TURN NUM_INT .)
    FOR             reduce using rule 10 (turn -> TURN NUM_INT .)
    UNTIL           reduce using rule 10 (turn -> TURN NUM_INT .)
    RETURN          reduce using rule 10 (turn -> TURN NUM_INT .)
    IDENTIFIER      reduce using rule 10 (turn -> TURN NUM_INT .)
    NOT             reduce using rule 10 (turn -> TURN NUM_INT .)
    LSQBRACK        reduce using rule 10 (turn -> TURN NUM_INT .)
    IF              reduce using rule 10 (turn -> TURN NUM_INT .)
    TURN            reduce using rule 10 (turn -> TURN NUM_INT .)
    TURNTO          reduce using rule 10 (turn -> TURN NUM_INT .)
    STEP            reduce using rule 10 (turn -> TURN NUM_INT .)
    BEAVER          reduce using rule 10 (turn -> TURN NUM_INT .)
    TURTLE          reduce using rule 10 (turn -> TURN NUM_INT .)
    NUM_INT         reduce using rule 10 (turn -> TURN NUM_INT .)
    TRUE            reduce using rule 10 (turn -> TURN NUM_INT .)
    FALSE           reduce using rule 10 (turn -> TURN NUM_INT .)
    $end            reduce using rule 10 (turn -> TURN NUM_INT .)
    COMMA           reduce using rule 10 (turn -> TURN NUM_INT .)
    ELSE            reduce using rule 10 (turn -> TURN NUM_INT .)


state 54

    (12) turn -> TURNTO BANANA . LSQBRACK NUM_INT RSQBRACK
    (13) turn -> TURNTO BANANA . LSQBRACK expression RSQBRACK

    LSQBRACK        shift and go to state 90


state 55

    (16) turn -> TURNTO expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 16 (turn -> TURNTO expression .)
    SEE             reduce using rule 16 (turn -> TURNTO expression .)
    HEALTH          reduce using rule 16 (turn -> TURNTO expression .)
    FOR             reduce using rule 16 (turn -> TURNTO expression .)
    UNTIL           reduce using rule 16 (turn -> TURNTO expression .)
    RETURN          reduce using rule 16 (turn -> TURNTO expression .)
    IDENTIFIER      reduce using rule 16 (turn -> TURNTO expression .)
    NOT             reduce using rule 16 (turn -> TURNTO expression .)
    LSQBRACK        reduce using rule 16 (turn -> TURNTO expression .)
    IF              reduce using rule 16 (turn -> TURNTO expression .)
    TURN            reduce using rule 16 (turn -> TURNTO expression .)
    TURNTO          reduce using rule 16 (turn -> TURNTO expression .)
    STEP            reduce using rule 16 (turn -> TURNTO expression .)
    BEAVER          reduce using rule 16 (turn -> TURNTO expression .)
    TURTLE          reduce using rule 16 (turn -> TURNTO expression .)
    NUM_INT         reduce using rule 16 (turn -> TURNTO expression .)
    TRUE            reduce using rule 16 (turn -> TURNTO expression .)
    FALSE           reduce using rule 16 (turn -> TURNTO expression .)
    $end            reduce using rule 16 (turn -> TURNTO expression .)
    COMMA           reduce using rule 16 (turn -> TURNTO expression .)
    ELSE            reduce using rule 16 (turn -> TURNTO expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 56

    (14) turn -> TURNTO MATCH . LSQBRACK NUM_INT RSQBRACK
    (15) turn -> TURNTO MATCH . LSQBRACK expression RSQBRACK

    LSQBRACK        shift and go to state 91


state 57

    (17) step -> STEP expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 17 (step -> STEP expression .)
    SEE             reduce using rule 17 (step -> STEP expression .)
    HEALTH          reduce using rule 17 (step -> STEP expression .)
    FOR             reduce using rule 17 (step -> STEP expression .)
    UNTIL           reduce using rule 17 (step -> STEP expression .)
    RETURN          reduce using rule 17 (step -> STEP expression .)
    IDENTIFIER      reduce using rule 17 (step -> STEP expression .)
    NOT             reduce using rule 17 (step -> STEP expression .)
    LSQBRACK        reduce using rule 17 (step -> STEP expression .)
    IF              reduce using rule 17 (step -> STEP expression .)
    TURN            reduce using rule 17 (step -> STEP expression .)
    TURNTO          reduce using rule 17 (step -> STEP expression .)
    STEP            reduce using rule 17 (step -> STEP expression .)
    BEAVER          reduce using rule 17 (step -> STEP expression .)
    TURTLE          reduce using rule 17 (step -> STEP expression .)
    NUM_INT         reduce using rule 17 (step -> STEP expression .)
    TRUE            reduce using rule 17 (step -> STEP expression .)
    FALSE           reduce using rule 17 (step -> STEP expression .)
    $end            reduce using rule 17 (step -> STEP expression .)
    COMMA           reduce using rule 17 (step -> STEP expression .)
    ELSE            reduce using rule 17 (step -> STEP expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 58

    (18) step -> STEP MINUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 92
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 59

    (19) step -> STEP DISTANCETO . expression
    (23) step -> STEP DISTANCETO . BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> STEP DISTANCETO . BANANA LSQBRACK expression RSQBRACK
    (25) step -> STEP DISTANCETO . MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> STEP DISTANCETO . MATCH LSQBRACK expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    BANANA          shift and go to state 94
    MATCH           shift and go to state 95
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 93
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 60

    (21) step -> BEAVER LSQBRACK . NUM_INT RSQBRACK POINT STEP expression

    NUM_INT         shift and go to state 96


state 61

    (22) step -> TURTLE LSQBRACK . NUM_INT RSQBRACK POINT STEP expression

    NUM_INT         shift and go to state 97


state 62

    (32) boolean -> boolean AND . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean

    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20

    boolean                        shift and go to state 98
    expression                     shift and go to state 99
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17

state 63

    (33) boolean -> boolean OR . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean

    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20

    boolean                        shift and go to state 100
    expression                     shift and go to state 99
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17

state 64

    (46) expression -> identifier LSQBRACK . expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 29
    expression                     shift and go to state 101
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 65

    (48) expression -> identifier EQUALS . assignable
    (40) assignable -> . primitive
    (41) assignable -> . expression
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE
    (27) identifier -> . IDENTIFIER

    NUM_INT         shift and go to state 20
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    IDENTIFIER      shift and go to state 15

    identifier                     shift and go to state 29
    assignable                     shift and go to state 68
    primitive                      shift and go to state 69
    expression                     shift and go to state 70
    boolean                        shift and go to state 25

state 66

    (47) statement -> identifier LSQBRACK expression . RSQBRACK EQUALS expression
    (46) expression -> identifier LSQBRACK expression . RSQBRACK
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (43) arguments -> expression .
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

  ! shift/reduce conflict for RSQBRACK resolved as shift
    RSQBRACK        shift and go to state 102
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    COMMA           reduce using rule 43 (arguments -> expression .)
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40

  ! RSQBRACK        [ reduce using rule 43 (arguments -> expression .) ]


state 67

    (63) statement -> identifier EQUALS LPAREN . arguments RPAREN ARROW_LTR statement_list COMMA
    (42) arguments -> . arguments COMMA expression
    (43) arguments -> . expression
    (44) arguments -> .
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    RPAREN          reduce using rule 44 (arguments -> .)
    COMMA           reduce using rule 44 (arguments -> .)
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 29
    arguments                      shift and go to state 103
    expression                     shift and go to state 31
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 68

    (48) expression -> identifier EQUALS assignable .

    POINT           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    PLUS            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    MINUS           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    EQ              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    GT              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LT              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    SAY             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    SEE             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    HEALTH          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    FOR             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    UNTIL           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    RETURN          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    IDENTIFIER      reduce using rule 48 (expression -> identifier EQUALS assignable .)
    NOT             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    LSQBRACK        reduce using rule 48 (expression -> identifier EQUALS assignable .)
    IF              reduce using rule 48 (expression -> identifier EQUALS assignable .)
    TURN            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    TURNTO          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    STEP            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    BEAVER          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    TURTLE          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    NUM_INT         reduce using rule 48 (expression -> identifier EQUALS assignable .)
    TRUE            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    FALSE           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    $end            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    COMMA           reduce using rule 48 (expression -> identifier EQUALS assignable .)
    RSQBRACK        reduce using rule 48 (expression -> identifier EQUALS assignable .)
    ELSE            reduce using rule 48 (expression -> identifier EQUALS assignable .)
    RPAREN          reduce using rule 48 (expression -> identifier EQUALS assignable .)
    AND             reduce using rule 48 (expression -> identifier EQUALS assignable .)
    OR              reduce using rule 48 (expression -> identifier EQUALS assignable .)


state 69

    (40) assignable -> primitive .
    (54) expression -> primitive .

  ! reduce/reduce conflict for PLUS resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for GT resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for LT resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for POINT resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for SAY resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for SEE resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for HEALTH resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for UNTIL resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for NOT resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for LSQBRACK resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for IF resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for TURN resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for TURNTO resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for STEP resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for BEAVER resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for TURTLE resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for NUM_INT resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for TRUE resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for FALSE resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for $end resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for ELSE resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for RSQBRACK resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for AND resolved using rule 40 (assignable -> primitive .)
  ! reduce/reduce conflict for OR resolved using rule 40 (assignable -> primitive .)
    PLUS            reduce using rule 40 (assignable -> primitive .)
    MINUS           reduce using rule 40 (assignable -> primitive .)
    EQ              reduce using rule 40 (assignable -> primitive .)
    GT              reduce using rule 40 (assignable -> primitive .)
    LT              reduce using rule 40 (assignable -> primitive .)
    POINT           reduce using rule 40 (assignable -> primitive .)
    SAY             reduce using rule 40 (assignable -> primitive .)
    SEE             reduce using rule 40 (assignable -> primitive .)
    HEALTH          reduce using rule 40 (assignable -> primitive .)
    FOR             reduce using rule 40 (assignable -> primitive .)
    UNTIL           reduce using rule 40 (assignable -> primitive .)
    RETURN          reduce using rule 40 (assignable -> primitive .)
    IDENTIFIER      reduce using rule 40 (assignable -> primitive .)
    NOT             reduce using rule 40 (assignable -> primitive .)
    LSQBRACK        reduce using rule 40 (assignable -> primitive .)
    IF              reduce using rule 40 (assignable -> primitive .)
    TURN            reduce using rule 40 (assignable -> primitive .)
    TURNTO          reduce using rule 40 (assignable -> primitive .)
    STEP            reduce using rule 40 (assignable -> primitive .)
    BEAVER          reduce using rule 40 (assignable -> primitive .)
    TURTLE          reduce using rule 40 (assignable -> primitive .)
    NUM_INT         reduce using rule 40 (assignable -> primitive .)
    TRUE            reduce using rule 40 (assignable -> primitive .)
    FALSE           reduce using rule 40 (assignable -> primitive .)
    $end            reduce using rule 40 (assignable -> primitive .)
    COMMA           reduce using rule 40 (assignable -> primitive .)
    ELSE            reduce using rule 40 (assignable -> primitive .)
    RSQBRACK        reduce using rule 40 (assignable -> primitive .)
    RPAREN          reduce using rule 40 (assignable -> primitive .)
    AND             reduce using rule 40 (assignable -> primitive .)
    OR              reduce using rule 40 (assignable -> primitive .)

  ! PLUS            [ reduce using rule 54 (expression -> primitive .) ]
  ! MINUS           [ reduce using rule 54 (expression -> primitive .) ]
  ! EQ              [ reduce using rule 54 (expression -> primitive .) ]
  ! GT              [ reduce using rule 54 (expression -> primitive .) ]
  ! LT              [ reduce using rule 54 (expression -> primitive .) ]
  ! POINT           [ reduce using rule 54 (expression -> primitive .) ]
  ! SAY             [ reduce using rule 54 (expression -> primitive .) ]
  ! SEE             [ reduce using rule 54 (expression -> primitive .) ]
  ! HEALTH          [ reduce using rule 54 (expression -> primitive .) ]
  ! FOR             [ reduce using rule 54 (expression -> primitive .) ]
  ! UNTIL           [ reduce using rule 54 (expression -> primitive .) ]
  ! RETURN          [ reduce using rule 54 (expression -> primitive .) ]
  ! IDENTIFIER      [ reduce using rule 54 (expression -> primitive .) ]
  ! NOT             [ reduce using rule 54 (expression -> primitive .) ]
  ! LSQBRACK        [ reduce using rule 54 (expression -> primitive .) ]
  ! IF              [ reduce using rule 54 (expression -> primitive .) ]
  ! TURN            [ reduce using rule 54 (expression -> primitive .) ]
  ! TURNTO          [ reduce using rule 54 (expression -> primitive .) ]
  ! STEP            [ reduce using rule 54 (expression -> primitive .) ]
  ! BEAVER          [ reduce using rule 54 (expression -> primitive .) ]
  ! TURTLE          [ reduce using rule 54 (expression -> primitive .) ]
  ! NUM_INT         [ reduce using rule 54 (expression -> primitive .) ]
  ! TRUE            [ reduce using rule 54 (expression -> primitive .) ]
  ! FALSE           [ reduce using rule 54 (expression -> primitive .) ]
  ! $end            [ reduce using rule 54 (expression -> primitive .) ]
  ! COMMA           [ reduce using rule 54 (expression -> primitive .) ]
  ! ELSE            [ reduce using rule 54 (expression -> primitive .) ]
  ! RSQBRACK        [ reduce using rule 54 (expression -> primitive .) ]
  ! RPAREN          [ reduce using rule 54 (expression -> primitive .) ]
  ! AND             [ reduce using rule 54 (expression -> primitive .) ]
  ! OR              [ reduce using rule 54 (expression -> primitive .) ]


state 70

    (41) assignable -> expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    POINT           reduce using rule 41 (assignable -> expression .)
    SAY             reduce using rule 41 (assignable -> expression .)
    SEE             reduce using rule 41 (assignable -> expression .)
    HEALTH          reduce using rule 41 (assignable -> expression .)
    FOR             reduce using rule 41 (assignable -> expression .)
    UNTIL           reduce using rule 41 (assignable -> expression .)
    RETURN          reduce using rule 41 (assignable -> expression .)
    IDENTIFIER      reduce using rule 41 (assignable -> expression .)
    NOT             reduce using rule 41 (assignable -> expression .)
    LSQBRACK        reduce using rule 41 (assignable -> expression .)
    IF              reduce using rule 41 (assignable -> expression .)
    TURN            reduce using rule 41 (assignable -> expression .)
    TURNTO          reduce using rule 41 (assignable -> expression .)
    STEP            reduce using rule 41 (assignable -> expression .)
    BEAVER          reduce using rule 41 (assignable -> expression .)
    TURTLE          reduce using rule 41 (assignable -> expression .)
    NUM_INT         reduce using rule 41 (assignable -> expression .)
    TRUE            reduce using rule 41 (assignable -> expression .)
    FALSE           reduce using rule 41 (assignable -> expression .)
    $end            reduce using rule 41 (assignable -> expression .)
    COMMA           reduce using rule 41 (assignable -> expression .)
    ELSE            reduce using rule 41 (assignable -> expression .)
    RSQBRACK        reduce using rule 41 (assignable -> expression .)
    RPAREN          reduce using rule 41 (assignable -> expression .)
    AND             reduce using rule 41 (assignable -> expression .)
    OR              reduce using rule 41 (assignable -> expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40

  ! PLUS            [ reduce using rule 41 (assignable -> expression .) ]
  ! MINUS           [ reduce using rule 41 (assignable -> expression .) ]
  ! EQ              [ reduce using rule 41 (assignable -> expression .) ]
  ! GT              [ reduce using rule 41 (assignable -> expression .) ]
  ! LT              [ reduce using rule 41 (assignable -> expression .) ]


state 71

    (65) expression -> identifier LPAREN arguments . RPAREN
    (42) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 104
    COMMA           shift and go to state 82


state 72

    (66) statement -> identifier arguments COMMA .
    (42) arguments -> arguments COMMA . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LSQBRACK resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for NUM_INT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SAY             reduce using rule 66 (statement -> identifier arguments COMMA .)
    SEE             reduce using rule 66 (statement -> identifier arguments COMMA .)
    HEALTH          reduce using rule 66 (statement -> identifier arguments COMMA .)
    FOR             reduce using rule 66 (statement -> identifier arguments COMMA .)
    UNTIL           reduce using rule 66 (statement -> identifier arguments COMMA .)
    RETURN          reduce using rule 66 (statement -> identifier arguments COMMA .)
    IF              reduce using rule 66 (statement -> identifier arguments COMMA .)
    TURN            reduce using rule 66 (statement -> identifier arguments COMMA .)
    TURNTO          reduce using rule 66 (statement -> identifier arguments COMMA .)
    STEP            reduce using rule 66 (statement -> identifier arguments COMMA .)
    BEAVER          reduce using rule 66 (statement -> identifier arguments COMMA .)
    TURTLE          reduce using rule 66 (statement -> identifier arguments COMMA .)
    $end            reduce using rule 66 (statement -> identifier arguments COMMA .)
    COMMA           reduce using rule 66 (statement -> identifier arguments COMMA .)
    ELSE            reduce using rule 66 (statement -> identifier arguments COMMA .)
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! IDENTIFIER      [ reduce using rule 66 (statement -> identifier arguments COMMA .) ]
  ! NOT             [ reduce using rule 66 (statement -> identifier arguments COMMA .) ]
  ! LSQBRACK        [ reduce using rule 66 (statement -> identifier arguments COMMA .) ]
  ! NUM_INT         [ reduce using rule 66 (statement -> identifier arguments COMMA .) ]
  ! TRUE            [ reduce using rule 66 (statement -> identifier arguments COMMA .) ]
  ! FALSE           [ reduce using rule 66 (statement -> identifier arguments COMMA .) ]

    identifier                     shift and go to state 29
    expression                     shift and go to state 105
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 73

    (56) statement -> expression POINT TIMES . ARROW_LTR statement_list COMMA

    ARROW_LTR       shift and go to state 106


state 74

    (11) turn -> expression POINT TURNTO . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 107
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 75

    (20) step -> expression POINT STEP . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 108
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 76

    (30) expression -> expression PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    POINT           reduce using rule 30 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 30 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 30 (expression -> expression PLUS expression .)
    EQ              reduce using rule 30 (expression -> expression PLUS expression .)
    GT              reduce using rule 30 (expression -> expression PLUS expression .)
    LT              reduce using rule 30 (expression -> expression PLUS expression .)
    SAY             reduce using rule 30 (expression -> expression PLUS expression .)
    SEE             reduce using rule 30 (expression -> expression PLUS expression .)
    HEALTH          reduce using rule 30 (expression -> expression PLUS expression .)
    FOR             reduce using rule 30 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 30 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 30 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 30 (expression -> expression PLUS expression .)
    NOT             reduce using rule 30 (expression -> expression PLUS expression .)
    LSQBRACK        reduce using rule 30 (expression -> expression PLUS expression .)
    IF              reduce using rule 30 (expression -> expression PLUS expression .)
    TURN            reduce using rule 30 (expression -> expression PLUS expression .)
    TURNTO          reduce using rule 30 (expression -> expression PLUS expression .)
    STEP            reduce using rule 30 (expression -> expression PLUS expression .)
    BEAVER          reduce using rule 30 (expression -> expression PLUS expression .)
    TURTLE          reduce using rule 30 (expression -> expression PLUS expression .)
    NUM_INT         reduce using rule 30 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 30 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 30 (expression -> expression PLUS expression .)
    $end            reduce using rule 30 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 30 (expression -> expression PLUS expression .)
    RSQBRACK        reduce using rule 30 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 30 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 30 (expression -> expression PLUS expression .)
    AND             reduce using rule 30 (expression -> expression PLUS expression .)
    OR              reduce using rule 30 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! LT              [ shift and go to state 40 ]


state 77

    (31) expression -> expression MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    POINT           reduce using rule 31 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 31 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 31 (expression -> expression MINUS expression .)
    EQ              reduce using rule 31 (expression -> expression MINUS expression .)
    GT              reduce using rule 31 (expression -> expression MINUS expression .)
    LT              reduce using rule 31 (expression -> expression MINUS expression .)
    SAY             reduce using rule 31 (expression -> expression MINUS expression .)
    SEE             reduce using rule 31 (expression -> expression MINUS expression .)
    HEALTH          reduce using rule 31 (expression -> expression MINUS expression .)
    FOR             reduce using rule 31 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 31 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 31 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 31 (expression -> expression MINUS expression .)
    NOT             reduce using rule 31 (expression -> expression MINUS expression .)
    LSQBRACK        reduce using rule 31 (expression -> expression MINUS expression .)
    IF              reduce using rule 31 (expression -> expression MINUS expression .)
    TURN            reduce using rule 31 (expression -> expression MINUS expression .)
    TURNTO          reduce using rule 31 (expression -> expression MINUS expression .)
    STEP            reduce using rule 31 (expression -> expression MINUS expression .)
    BEAVER          reduce using rule 31 (expression -> expression MINUS expression .)
    TURTLE          reduce using rule 31 (expression -> expression MINUS expression .)
    NUM_INT         reduce using rule 31 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 31 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 31 (expression -> expression MINUS expression .)
    $end            reduce using rule 31 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 31 (expression -> expression MINUS expression .)
    RSQBRACK        reduce using rule 31 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 31 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression MINUS expression .)
    AND             reduce using rule 31 (expression -> expression MINUS expression .)
    OR              reduce using rule 31 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! GT              [ shift and go to state 39 ]
  ! LT              [ shift and go to state 40 ]


state 78

    (34) boolean -> expression EQ expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    AND             reduce using rule 34 (boolean -> expression EQ expression .)
    OR              reduce using rule 34 (boolean -> expression EQ expression .)
    POINT           reduce using rule 34 (boolean -> expression EQ expression .)
    SAY             reduce using rule 34 (boolean -> expression EQ expression .)
    SEE             reduce using rule 34 (boolean -> expression EQ expression .)
    HEALTH          reduce using rule 34 (boolean -> expression EQ expression .)
    FOR             reduce using rule 34 (boolean -> expression EQ expression .)
    UNTIL           reduce using rule 34 (boolean -> expression EQ expression .)
    RETURN          reduce using rule 34 (boolean -> expression EQ expression .)
    IDENTIFIER      reduce using rule 34 (boolean -> expression EQ expression .)
    NOT             reduce using rule 34 (boolean -> expression EQ expression .)
    LSQBRACK        reduce using rule 34 (boolean -> expression EQ expression .)
    IF              reduce using rule 34 (boolean -> expression EQ expression .)
    TURN            reduce using rule 34 (boolean -> expression EQ expression .)
    TURNTO          reduce using rule 34 (boolean -> expression EQ expression .)
    STEP            reduce using rule 34 (boolean -> expression EQ expression .)
    BEAVER          reduce using rule 34 (boolean -> expression EQ expression .)
    TURTLE          reduce using rule 34 (boolean -> expression EQ expression .)
    NUM_INT         reduce using rule 34 (boolean -> expression EQ expression .)
    TRUE            reduce using rule 34 (boolean -> expression EQ expression .)
    FALSE           reduce using rule 34 (boolean -> expression EQ expression .)
    $end            reduce using rule 34 (boolean -> expression EQ expression .)
    COMMA           reduce using rule 34 (boolean -> expression EQ expression .)
    RSQBRACK        reduce using rule 34 (boolean -> expression EQ expression .)
    ELSE            reduce using rule 34 (boolean -> expression EQ expression .)
    RPAREN          reduce using rule 34 (boolean -> expression EQ expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40

  ! PLUS            [ reduce using rule 34 (boolean -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 34 (boolean -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 34 (boolean -> expression EQ expression .) ]
  ! GT              [ reduce using rule 34 (boolean -> expression EQ expression .) ]
  ! LT              [ reduce using rule 34 (boolean -> expression EQ expression .) ]


state 79

    (35) boolean -> expression GT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    AND             reduce using rule 35 (boolean -> expression GT expression .)
    OR              reduce using rule 35 (boolean -> expression GT expression .)
    POINT           reduce using rule 35 (boolean -> expression GT expression .)
    SAY             reduce using rule 35 (boolean -> expression GT expression .)
    SEE             reduce using rule 35 (boolean -> expression GT expression .)
    HEALTH          reduce using rule 35 (boolean -> expression GT expression .)
    FOR             reduce using rule 35 (boolean -> expression GT expression .)
    UNTIL           reduce using rule 35 (boolean -> expression GT expression .)
    RETURN          reduce using rule 35 (boolean -> expression GT expression .)
    IDENTIFIER      reduce using rule 35 (boolean -> expression GT expression .)
    NOT             reduce using rule 35 (boolean -> expression GT expression .)
    LSQBRACK        reduce using rule 35 (boolean -> expression GT expression .)
    IF              reduce using rule 35 (boolean -> expression GT expression .)
    TURN            reduce using rule 35 (boolean -> expression GT expression .)
    TURNTO          reduce using rule 35 (boolean -> expression GT expression .)
    STEP            reduce using rule 35 (boolean -> expression GT expression .)
    BEAVER          reduce using rule 35 (boolean -> expression GT expression .)
    TURTLE          reduce using rule 35 (boolean -> expression GT expression .)
    NUM_INT         reduce using rule 35 (boolean -> expression GT expression .)
    TRUE            reduce using rule 35 (boolean -> expression GT expression .)
    FALSE           reduce using rule 35 (boolean -> expression GT expression .)
    $end            reduce using rule 35 (boolean -> expression GT expression .)
    COMMA           reduce using rule 35 (boolean -> expression GT expression .)
    RSQBRACK        reduce using rule 35 (boolean -> expression GT expression .)
    ELSE            reduce using rule 35 (boolean -> expression GT expression .)
    RPAREN          reduce using rule 35 (boolean -> expression GT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40

  ! PLUS            [ reduce using rule 35 (boolean -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 35 (boolean -> expression GT expression .) ]
  ! EQ              [ reduce using rule 35 (boolean -> expression GT expression .) ]
  ! GT              [ reduce using rule 35 (boolean -> expression GT expression .) ]
  ! LT              [ reduce using rule 35 (boolean -> expression GT expression .) ]


state 80

    (36) boolean -> expression LT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
    AND             reduce using rule 36 (boolean -> expression LT expression .)
    OR              reduce using rule 36 (boolean -> expression LT expression .)
    POINT           reduce using rule 36 (boolean -> expression LT expression .)
    SAY             reduce using rule 36 (boolean -> expression LT expression .)
    SEE             reduce using rule 36 (boolean -> expression LT expression .)
    HEALTH          reduce using rule 36 (boolean -> expression LT expression .)
    FOR             reduce using rule 36 (boolean -> expression LT expression .)
    UNTIL           reduce using rule 36 (boolean -> expression LT expression .)
    RETURN          reduce using rule 36 (boolean -> expression LT expression .)
    IDENTIFIER      reduce using rule 36 (boolean -> expression LT expression .)
    NOT             reduce using rule 36 (boolean -> expression LT expression .)
    LSQBRACK        reduce using rule 36 (boolean -> expression LT expression .)
    IF              reduce using rule 36 (boolean -> expression LT expression .)
    TURN            reduce using rule 36 (boolean -> expression LT expression .)
    TURNTO          reduce using rule 36 (boolean -> expression LT expression .)
    STEP            reduce using rule 36 (boolean -> expression LT expression .)
    BEAVER          reduce using rule 36 (boolean -> expression LT expression .)
    TURTLE          reduce using rule 36 (boolean -> expression LT expression .)
    NUM_INT         reduce using rule 36 (boolean -> expression LT expression .)
    TRUE            reduce using rule 36 (boolean -> expression LT expression .)
    FALSE           reduce using rule 36 (boolean -> expression LT expression .)
    $end            reduce using rule 36 (boolean -> expression LT expression .)
    COMMA           reduce using rule 36 (boolean -> expression LT expression .)
    RSQBRACK        reduce using rule 36 (boolean -> expression LT expression .)
    ELSE            reduce using rule 36 (boolean -> expression LT expression .)
    RPAREN          reduce using rule 36 (boolean -> expression LT expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40

  ! PLUS            [ reduce using rule 36 (boolean -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 36 (boolean -> expression LT expression .) ]
  ! EQ              [ reduce using rule 36 (boolean -> expression LT expression .) ]
  ! GT              [ reduce using rule 36 (boolean -> expression LT expression .) ]
  ! LT              [ reduce using rule 36 (boolean -> expression LT expression .) ]


state 81

    (45) expression -> LSQBRACK arguments RSQBRACK .

    POINT           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    PLUS            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    MINUS           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    EQ              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    GT              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LT              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    SAY             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    SEE             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    HEALTH          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    FOR             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    UNTIL           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RETURN          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    IDENTIFIER      reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    NOT             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    LSQBRACK        reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    IF              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    TURN            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    TURNTO          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    STEP            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    BEAVER          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    TURTLE          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    NUM_INT         reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    TRUE            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    FALSE           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    $end            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    COMMA           reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RSQBRACK        reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    ELSE            reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    RPAREN          reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    AND             reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)
    OR              reduce using rule 45 (expression -> LSQBRACK arguments RSQBRACK .)


state 82

    (42) arguments -> arguments COMMA . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 105
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 83

    (51) statement -> SAY LPAREN RPAREN .

    SAY             reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    SEE             reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    HEALTH          reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    FOR             reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    UNTIL           reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    RETURN          reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    NOT             reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    LSQBRACK        reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    IF              reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    TURN            reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    TURNTO          reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    STEP            reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    BEAVER          reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    TURTLE          reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    NUM_INT         reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    TRUE            reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    FALSE           reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    $end            reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    COMMA           reduce using rule 51 (statement -> SAY LPAREN RPAREN .)
    ELSE            reduce using rule 51 (statement -> SAY LPAREN RPAREN .)


state 84

    (52) statement -> SEE LPAREN RPAREN .

    SAY             reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    SEE             reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    HEALTH          reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    FOR             reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    UNTIL           reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    RETURN          reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    NOT             reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    LSQBRACK        reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    IF              reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    TURN            reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    TURNTO          reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    STEP            reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    BEAVER          reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    TURTLE          reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    NUM_INT         reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    TRUE            reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    FALSE           reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    $end            reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    COMMA           reduce using rule 52 (statement -> SEE LPAREN RPAREN .)
    ELSE            reduce using rule 52 (statement -> SEE LPAREN RPAREN .)


state 85

    (53) statement -> HEALTH LPAREN RPAREN .

    SAY             reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    SEE             reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    HEALTH          reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    FOR             reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    UNTIL           reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    RETURN          reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    NOT             reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    LSQBRACK        reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    IF              reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    TURN            reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    TURNTO          reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    STEP            reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    BEAVER          reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    TURTLE          reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    NUM_INT         reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    TRUE            reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    FALSE           reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    $end            reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    COMMA           reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)
    ELSE            reduce using rule 53 (statement -> HEALTH LPAREN RPAREN .)


state 86

    (57) statement -> FOR identifier IN . BANANAS statement_list COMMA
    (58) statement -> FOR identifier IN . TURTLES statement_list COMMA
    (59) statement -> FOR identifier IN . CROCODILES statement_list COMMA
    (60) statement -> FOR identifier IN . MATCHES statement_list COMMA

    BANANAS         shift and go to state 109
    TURTLES         shift and go to state 110
    CROCODILES      shift and go to state 111
    MATCHES         shift and go to state 112


state 87

    (61) statement -> UNTIL expression statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 113
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement                      shift and go to state 28
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 88

    (62) statement -> UNTIL NEAR MATCH . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement_list                 shift and go to state 114
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 89

    (49) if_statement -> IF expression statement_list . COMMA
    (50) if_statement -> IF expression statement_list . ELSE statement_list COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 115
    ELSE            shift and go to state 116
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement                      shift and go to state 28
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 90

    (12) turn -> TURNTO BANANA LSQBRACK . NUM_INT RSQBRACK
    (13) turn -> TURNTO BANANA LSQBRACK . expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUM_INT         shift and go to state 117
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 118
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 91

    (14) turn -> TURNTO MATCH LSQBRACK . NUM_INT RSQBRACK
    (15) turn -> TURNTO MATCH LSQBRACK . expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUM_INT         shift and go to state 119
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 120
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 92

    (18) step -> STEP MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 18 (step -> STEP MINUS expression .)
    SEE             reduce using rule 18 (step -> STEP MINUS expression .)
    HEALTH          reduce using rule 18 (step -> STEP MINUS expression .)
    FOR             reduce using rule 18 (step -> STEP MINUS expression .)
    UNTIL           reduce using rule 18 (step -> STEP MINUS expression .)
    RETURN          reduce using rule 18 (step -> STEP MINUS expression .)
    IDENTIFIER      reduce using rule 18 (step -> STEP MINUS expression .)
    NOT             reduce using rule 18 (step -> STEP MINUS expression .)
    LSQBRACK        reduce using rule 18 (step -> STEP MINUS expression .)
    IF              reduce using rule 18 (step -> STEP MINUS expression .)
    TURN            reduce using rule 18 (step -> STEP MINUS expression .)
    TURNTO          reduce using rule 18 (step -> STEP MINUS expression .)
    STEP            reduce using rule 18 (step -> STEP MINUS expression .)
    BEAVER          reduce using rule 18 (step -> STEP MINUS expression .)
    TURTLE          reduce using rule 18 (step -> STEP MINUS expression .)
    NUM_INT         reduce using rule 18 (step -> STEP MINUS expression .)
    TRUE            reduce using rule 18 (step -> STEP MINUS expression .)
    FALSE           reduce using rule 18 (step -> STEP MINUS expression .)
    $end            reduce using rule 18 (step -> STEP MINUS expression .)
    COMMA           reduce using rule 18 (step -> STEP MINUS expression .)
    ELSE            reduce using rule 18 (step -> STEP MINUS expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 93

    (19) step -> STEP DISTANCETO expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 19 (step -> STEP DISTANCETO expression .)
    SEE             reduce using rule 19 (step -> STEP DISTANCETO expression .)
    HEALTH          reduce using rule 19 (step -> STEP DISTANCETO expression .)
    FOR             reduce using rule 19 (step -> STEP DISTANCETO expression .)
    UNTIL           reduce using rule 19 (step -> STEP DISTANCETO expression .)
    RETURN          reduce using rule 19 (step -> STEP DISTANCETO expression .)
    IDENTIFIER      reduce using rule 19 (step -> STEP DISTANCETO expression .)
    NOT             reduce using rule 19 (step -> STEP DISTANCETO expression .)
    LSQBRACK        reduce using rule 19 (step -> STEP DISTANCETO expression .)
    IF              reduce using rule 19 (step -> STEP DISTANCETO expression .)
    TURN            reduce using rule 19 (step -> STEP DISTANCETO expression .)
    TURNTO          reduce using rule 19 (step -> STEP DISTANCETO expression .)
    STEP            reduce using rule 19 (step -> STEP DISTANCETO expression .)
    BEAVER          reduce using rule 19 (step -> STEP DISTANCETO expression .)
    TURTLE          reduce using rule 19 (step -> STEP DISTANCETO expression .)
    NUM_INT         reduce using rule 19 (step -> STEP DISTANCETO expression .)
    TRUE            reduce using rule 19 (step -> STEP DISTANCETO expression .)
    FALSE           reduce using rule 19 (step -> STEP DISTANCETO expression .)
    $end            reduce using rule 19 (step -> STEP DISTANCETO expression .)
    COMMA           reduce using rule 19 (step -> STEP DISTANCETO expression .)
    ELSE            reduce using rule 19 (step -> STEP DISTANCETO expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 94

    (23) step -> STEP DISTANCETO BANANA . LSQBRACK NUM_INT RSQBRACK
    (24) step -> STEP DISTANCETO BANANA . LSQBRACK expression RSQBRACK

    LSQBRACK        shift and go to state 121


state 95

    (25) step -> STEP DISTANCETO MATCH . LSQBRACK NUM_INT RSQBRACK
    (26) step -> STEP DISTANCETO MATCH . LSQBRACK expression RSQBRACK

    LSQBRACK        shift and go to state 122


state 96

    (21) step -> BEAVER LSQBRACK NUM_INT . RSQBRACK POINT STEP expression

    RSQBRACK        shift and go to state 123


state 97

    (22) step -> TURTLE LSQBRACK NUM_INT . RSQBRACK POINT STEP expression

    RSQBRACK        shift and go to state 124


state 98

    (32) boolean -> boolean AND boolean .
    (32) boolean -> boolean . AND boolean
    (33) boolean -> boolean . OR boolean
    (29) primitive -> boolean .

  ! reduce/reduce conflict for EQ resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for GT resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for LT resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (primitive -> boolean .)
    AND             reduce using rule 32 (boolean -> boolean AND boolean .)
    OR              reduce using rule 32 (boolean -> boolean AND boolean .)
    POINT           reduce using rule 32 (boolean -> boolean AND boolean .)
    SAY             reduce using rule 32 (boolean -> boolean AND boolean .)
    SEE             reduce using rule 32 (boolean -> boolean AND boolean .)
    HEALTH          reduce using rule 32 (boolean -> boolean AND boolean .)
    FOR             reduce using rule 32 (boolean -> boolean AND boolean .)
    UNTIL           reduce using rule 32 (boolean -> boolean AND boolean .)
    RETURN          reduce using rule 32 (boolean -> boolean AND boolean .)
    IDENTIFIER      reduce using rule 32 (boolean -> boolean AND boolean .)
    NOT             reduce using rule 32 (boolean -> boolean AND boolean .)
    LSQBRACK        reduce using rule 32 (boolean -> boolean AND boolean .)
    IF              reduce using rule 32 (boolean -> boolean AND boolean .)
    TURN            reduce using rule 32 (boolean -> boolean AND boolean .)
    TURNTO          reduce using rule 32 (boolean -> boolean AND boolean .)
    STEP            reduce using rule 32 (boolean -> boolean AND boolean .)
    BEAVER          reduce using rule 32 (boolean -> boolean AND boolean .)
    TURTLE          reduce using rule 32 (boolean -> boolean AND boolean .)
    NUM_INT         reduce using rule 32 (boolean -> boolean AND boolean .)
    TRUE            reduce using rule 32 (boolean -> boolean AND boolean .)
    FALSE           reduce using rule 32 (boolean -> boolean AND boolean .)
    $end            reduce using rule 32 (boolean -> boolean AND boolean .)
    COMMA           reduce using rule 32 (boolean -> boolean AND boolean .)
    RSQBRACK        reduce using rule 32 (boolean -> boolean AND boolean .)
    ELSE            reduce using rule 32 (boolean -> boolean AND boolean .)
    RPAREN          reduce using rule 32 (boolean -> boolean AND boolean .)
    EQ              reduce using rule 29 (primitive -> boolean .)
    GT              reduce using rule 29 (primitive -> boolean .)
    LT              reduce using rule 29 (primitive -> boolean .)
    PLUS            reduce using rule 29 (primitive -> boolean .)
    MINUS           reduce using rule 29 (primitive -> boolean .)

  ! PLUS            [ reduce using rule 32 (boolean -> boolean AND boolean .) ]
  ! MINUS           [ reduce using rule 32 (boolean -> boolean AND boolean .) ]
  ! EQ              [ reduce using rule 32 (boolean -> boolean AND boolean .) ]
  ! GT              [ reduce using rule 32 (boolean -> boolean AND boolean .) ]
  ! LT              [ reduce using rule 32 (boolean -> boolean AND boolean .) ]
  ! AND             [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]


state 99

    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression

    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37


state 100

    (33) boolean -> boolean OR boolean .
    (32) boolean -> boolean . AND boolean
    (33) boolean -> boolean . OR boolean
    (29) primitive -> boolean .

  ! reduce/reduce conflict for EQ resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for GT resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for LT resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (primitive -> boolean .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (primitive -> boolean .)
    AND             reduce using rule 33 (boolean -> boolean OR boolean .)
    OR              reduce using rule 33 (boolean -> boolean OR boolean .)
    POINT           reduce using rule 33 (boolean -> boolean OR boolean .)
    SAY             reduce using rule 33 (boolean -> boolean OR boolean .)
    SEE             reduce using rule 33 (boolean -> boolean OR boolean .)
    HEALTH          reduce using rule 33 (boolean -> boolean OR boolean .)
    FOR             reduce using rule 33 (boolean -> boolean OR boolean .)
    UNTIL           reduce using rule 33 (boolean -> boolean OR boolean .)
    RETURN          reduce using rule 33 (boolean -> boolean OR boolean .)
    IDENTIFIER      reduce using rule 33 (boolean -> boolean OR boolean .)
    NOT             reduce using rule 33 (boolean -> boolean OR boolean .)
    LSQBRACK        reduce using rule 33 (boolean -> boolean OR boolean .)
    IF              reduce using rule 33 (boolean -> boolean OR boolean .)
    TURN            reduce using rule 33 (boolean -> boolean OR boolean .)
    TURNTO          reduce using rule 33 (boolean -> boolean OR boolean .)
    STEP            reduce using rule 33 (boolean -> boolean OR boolean .)
    BEAVER          reduce using rule 33 (boolean -> boolean OR boolean .)
    TURTLE          reduce using rule 33 (boolean -> boolean OR boolean .)
    NUM_INT         reduce using rule 33 (boolean -> boolean OR boolean .)
    TRUE            reduce using rule 33 (boolean -> boolean OR boolean .)
    FALSE           reduce using rule 33 (boolean -> boolean OR boolean .)
    $end            reduce using rule 33 (boolean -> boolean OR boolean .)
    COMMA           reduce using rule 33 (boolean -> boolean OR boolean .)
    RSQBRACK        reduce using rule 33 (boolean -> boolean OR boolean .)
    ELSE            reduce using rule 33 (boolean -> boolean OR boolean .)
    RPAREN          reduce using rule 33 (boolean -> boolean OR boolean .)
    EQ              reduce using rule 29 (primitive -> boolean .)
    GT              reduce using rule 29 (primitive -> boolean .)
    LT              reduce using rule 29 (primitive -> boolean .)
    PLUS            reduce using rule 29 (primitive -> boolean .)
    MINUS           reduce using rule 29 (primitive -> boolean .)

  ! PLUS            [ reduce using rule 33 (boolean -> boolean OR boolean .) ]
  ! MINUS           [ reduce using rule 33 (boolean -> boolean OR boolean .) ]
  ! EQ              [ reduce using rule 33 (boolean -> boolean OR boolean .) ]
  ! GT              [ reduce using rule 33 (boolean -> boolean OR boolean .) ]
  ! LT              [ reduce using rule 33 (boolean -> boolean OR boolean .) ]
  ! AND             [ shift and go to state 62 ]
  ! OR              [ shift and go to state 63 ]


state 101

    (46) expression -> identifier LSQBRACK expression . RSQBRACK
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    RSQBRACK        shift and go to state 125
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 102

    (47) statement -> identifier LSQBRACK expression RSQBRACK . EQUALS expression
    (46) expression -> identifier LSQBRACK expression RSQBRACK .

    EQUALS          shift and go to state 126
    POINT           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SAY             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SEE             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    HEALTH          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    UNTIL           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TURN            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TURNTO          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STEP            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BEAVER          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TURTLE          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 103

    (63) statement -> identifier EQUALS LPAREN arguments . RPAREN ARROW_LTR statement_list COMMA
    (42) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 127
    COMMA           shift and go to state 82


state 104

    (65) expression -> identifier LPAREN arguments RPAREN .

    POINT           reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    PLUS            reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    MINUS           reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    EQ              reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    GT              reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    LT              reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    SAY             reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    SEE             reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    HEALTH          reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    FOR             reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    UNTIL           reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    RETURN          reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    NOT             reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    LSQBRACK        reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    IF              reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    TURN            reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    TURNTO          reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    STEP            reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    BEAVER          reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    TURTLE          reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    NUM_INT         reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    TRUE            reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    FALSE           reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    $end            reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    COMMA           reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    RSQBRACK        reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    ELSE            reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    AND             reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)
    OR              reduce using rule 65 (expression -> identifier LPAREN arguments RPAREN .)


state 105

    (42) arguments -> arguments COMMA expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    COMMA           reduce using rule 42 (arguments -> arguments COMMA expression .)
    RSQBRACK        reduce using rule 42 (arguments -> arguments COMMA expression .)
    RPAREN          reduce using rule 42 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 106

    (56) statement -> expression POINT TIMES ARROW_LTR . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement_list                 shift and go to state 128
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 107

    (11) turn -> expression POINT TURNTO expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    SEE             reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    HEALTH          reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    FOR             reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    UNTIL           reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    RETURN          reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    IDENTIFIER      reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    NOT             reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    LSQBRACK        reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    IF              reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    TURN            reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    TURNTO          reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    STEP            reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    BEAVER          reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    TURTLE          reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    NUM_INT         reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    TRUE            reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    FALSE           reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    $end            reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    COMMA           reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    ELSE            reduce using rule 11 (turn -> expression POINT TURNTO expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 108

    (20) step -> expression POINT STEP expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 20 (step -> expression POINT STEP expression .)
    SEE             reduce using rule 20 (step -> expression POINT STEP expression .)
    HEALTH          reduce using rule 20 (step -> expression POINT STEP expression .)
    FOR             reduce using rule 20 (step -> expression POINT STEP expression .)
    UNTIL           reduce using rule 20 (step -> expression POINT STEP expression .)
    RETURN          reduce using rule 20 (step -> expression POINT STEP expression .)
    IDENTIFIER      reduce using rule 20 (step -> expression POINT STEP expression .)
    NOT             reduce using rule 20 (step -> expression POINT STEP expression .)
    LSQBRACK        reduce using rule 20 (step -> expression POINT STEP expression .)
    IF              reduce using rule 20 (step -> expression POINT STEP expression .)
    TURN            reduce using rule 20 (step -> expression POINT STEP expression .)
    TURNTO          reduce using rule 20 (step -> expression POINT STEP expression .)
    STEP            reduce using rule 20 (step -> expression POINT STEP expression .)
    BEAVER          reduce using rule 20 (step -> expression POINT STEP expression .)
    TURTLE          reduce using rule 20 (step -> expression POINT STEP expression .)
    NUM_INT         reduce using rule 20 (step -> expression POINT STEP expression .)
    TRUE            reduce using rule 20 (step -> expression POINT STEP expression .)
    FALSE           reduce using rule 20 (step -> expression POINT STEP expression .)
    $end            reduce using rule 20 (step -> expression POINT STEP expression .)
    COMMA           reduce using rule 20 (step -> expression POINT STEP expression .)
    ELSE            reduce using rule 20 (step -> expression POINT STEP expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 109

    (57) statement -> FOR identifier IN BANANAS . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 129
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 110

    (58) statement -> FOR identifier IN TURTLES . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 130
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 111

    (59) statement -> FOR identifier IN CROCODILES . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 131
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 112

    (60) statement -> FOR identifier IN MATCHES . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 132
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 113

    (61) statement -> UNTIL expression statement_list COMMA .

    SAY             reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    SEE             reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    HEALTH          reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    FOR             reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    UNTIL           reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    RETURN          reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    IDENTIFIER      reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    NOT             reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    LSQBRACK        reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    IF              reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    TURN            reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    TURNTO          reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    STEP            reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    BEAVER          reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    TURTLE          reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    NUM_INT         reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    TRUE            reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    FALSE           reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    $end            reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    COMMA           reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)
    ELSE            reduce using rule 61 (statement -> UNTIL expression statement_list COMMA .)


state 114

    (62) statement -> UNTIL NEAR MATCH statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 133
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement                      shift and go to state 28
    identifier                     shift and go to state 3
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 115

    (49) if_statement -> IF expression statement_list COMMA .

    SAY             reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    SEE             reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    HEALTH          reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    FOR             reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    UNTIL           reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    RETURN          reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    IDENTIFIER      reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    NOT             reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    LSQBRACK        reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    IF              reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    TURN            reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    TURNTO          reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    STEP            reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    BEAVER          reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    TURTLE          reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    NUM_INT         reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    TRUE            reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    FALSE           reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    $end            reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    COMMA           reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)
    ELSE            reduce using rule 49 (if_statement -> IF expression statement_list COMMA .)


state 116

    (50) if_statement -> IF expression statement_list ELSE . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement_list                 shift and go to state 134
    statement                      shift and go to state 2
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 117

    (12) turn -> TURNTO BANANA LSQBRACK NUM_INT . RSQBRACK
    (28) primitive -> NUM_INT .

  ! shift/reduce conflict for RSQBRACK resolved as shift
    RSQBRACK        shift and go to state 135
    PLUS            reduce using rule 28 (primitive -> NUM_INT .)
    MINUS           reduce using rule 28 (primitive -> NUM_INT .)
    EQ              reduce using rule 28 (primitive -> NUM_INT .)
    GT              reduce using rule 28 (primitive -> NUM_INT .)
    LT              reduce using rule 28 (primitive -> NUM_INT .)

  ! RSQBRACK        [ reduce using rule 28 (primitive -> NUM_INT .) ]


state 118

    (13) turn -> TURNTO BANANA LSQBRACK expression . RSQBRACK
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    RSQBRACK        shift and go to state 136
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 119

    (14) turn -> TURNTO MATCH LSQBRACK NUM_INT . RSQBRACK
    (28) primitive -> NUM_INT .

  ! shift/reduce conflict for RSQBRACK resolved as shift
    RSQBRACK        shift and go to state 137
    PLUS            reduce using rule 28 (primitive -> NUM_INT .)
    MINUS           reduce using rule 28 (primitive -> NUM_INT .)
    EQ              reduce using rule 28 (primitive -> NUM_INT .)
    GT              reduce using rule 28 (primitive -> NUM_INT .)
    LT              reduce using rule 28 (primitive -> NUM_INT .)

  ! RSQBRACK        [ reduce using rule 28 (primitive -> NUM_INT .) ]


state 120

    (15) turn -> TURNTO MATCH LSQBRACK expression . RSQBRACK
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    RSQBRACK        shift and go to state 138
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 121

    (23) step -> STEP DISTANCETO BANANA LSQBRACK . NUM_INT RSQBRACK
    (24) step -> STEP DISTANCETO BANANA LSQBRACK . expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUM_INT         shift and go to state 139
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 140
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 122

    (25) step -> STEP DISTANCETO MATCH LSQBRACK . NUM_INT RSQBRACK
    (26) step -> STEP DISTANCETO MATCH LSQBRACK . expression RSQBRACK
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NUM_INT         shift and go to state 141
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 142
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 123

    (21) step -> BEAVER LSQBRACK NUM_INT RSQBRACK . POINT STEP expression

    POINT           shift and go to state 143


state 124

    (22) step -> TURTLE LSQBRACK NUM_INT RSQBRACK . POINT STEP expression

    POINT           shift and go to state 144


state 125

    (46) expression -> identifier LSQBRACK expression RSQBRACK .

    PLUS            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    MINUS           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    EQ              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    GT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LT              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SAY             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    SEE             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    HEALTH          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    UNTIL           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TURN            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TURNTO          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    STEP            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    BEAVER          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TURTLE          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    POINT           reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    RPAREN          reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    AND             reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)
    OR              reduce using rule 46 (expression -> identifier LSQBRACK expression RSQBRACK .)


state 126

    (47) statement -> identifier LSQBRACK expression RSQBRACK EQUALS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 29
    expression                     shift and go to state 145
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 127

    (63) statement -> identifier EQUALS LPAREN arguments RPAREN . ARROW_LTR statement_list COMMA

    ARROW_LTR       shift and go to state 146


state 128

    (56) statement -> expression POINT TIMES ARROW_LTR statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 147
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement                      shift and go to state 28
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 129

    (57) statement -> FOR identifier IN BANANAS statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 148
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement                      shift and go to state 28
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 130

    (58) statement -> FOR identifier IN TURTLES statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 149
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement                      shift and go to state 28
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 131

    (59) statement -> FOR identifier IN CROCODILES statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 150
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement                      shift and go to state 28
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 132

    (60) statement -> FOR identifier IN MATCHES statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 151
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement                      shift and go to state 28
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 133

    (62) statement -> UNTIL NEAR MATCH statement_list COMMA .

    SAY             reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    SEE             reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    HEALTH          reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    FOR             reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    UNTIL           reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    RETURN          reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    IDENTIFIER      reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    NOT             reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    LSQBRACK        reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    IF              reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    TURN            reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    TURNTO          reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    STEP            reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    BEAVER          reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    TURTLE          reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    NUM_INT         reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    TRUE            reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    FALSE           reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    $end            reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    COMMA           reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)
    ELSE            reduce using rule 62 (statement -> UNTIL NEAR MATCH statement_list COMMA .)


state 134

    (50) if_statement -> IF expression statement_list ELSE statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 152
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 4
    statement                      shift and go to state 28
    identifier                     shift and go to state 3
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 135

    (12) turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .

    SAY             reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    SEE             reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    HEALTH          reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    FOR             reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    UNTIL           reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    RETURN          reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    IDENTIFIER      reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    NOT             reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    LSQBRACK        reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    IF              reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TURN            reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TURNTO          reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    STEP            reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    BEAVER          reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TURTLE          reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    NUM_INT         reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TRUE            reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    FALSE           reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    $end            reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    COMMA           reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)
    ELSE            reduce using rule 12 (turn -> TURNTO BANANA LSQBRACK NUM_INT RSQBRACK .)


state 136

    (13) turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .

    SAY             reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    SEE             reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    HEALTH          reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    UNTIL           reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    TURN            reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    TURNTO          reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    STEP            reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    BEAVER          reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    TURTLE          reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 13 (turn -> TURNTO BANANA LSQBRACK expression RSQBRACK .)


state 137

    (14) turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .

    SAY             reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    SEE             reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    HEALTH          reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    FOR             reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    UNTIL           reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    RETURN          reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    IDENTIFIER      reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    NOT             reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    LSQBRACK        reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    IF              reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TURN            reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TURNTO          reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    STEP            reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    BEAVER          reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TURTLE          reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    NUM_INT         reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TRUE            reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    FALSE           reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    $end            reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    COMMA           reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)
    ELSE            reduce using rule 14 (turn -> TURNTO MATCH LSQBRACK NUM_INT RSQBRACK .)


state 138

    (15) turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .

    SAY             reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    SEE             reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    HEALTH          reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    UNTIL           reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    TURN            reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    TURNTO          reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    STEP            reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    BEAVER          reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    TURTLE          reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 15 (turn -> TURNTO MATCH LSQBRACK expression RSQBRACK .)


state 139

    (23) step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT . RSQBRACK
    (28) primitive -> NUM_INT .

  ! shift/reduce conflict for RSQBRACK resolved as shift
    RSQBRACK        shift and go to state 153
    PLUS            reduce using rule 28 (primitive -> NUM_INT .)
    MINUS           reduce using rule 28 (primitive -> NUM_INT .)
    EQ              reduce using rule 28 (primitive -> NUM_INT .)
    GT              reduce using rule 28 (primitive -> NUM_INT .)
    LT              reduce using rule 28 (primitive -> NUM_INT .)

  ! RSQBRACK        [ reduce using rule 28 (primitive -> NUM_INT .) ]


state 140

    (24) step -> STEP DISTANCETO BANANA LSQBRACK expression . RSQBRACK
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    RSQBRACK        shift and go to state 154
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 141

    (25) step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT . RSQBRACK
    (28) primitive -> NUM_INT .

  ! shift/reduce conflict for RSQBRACK resolved as shift
    RSQBRACK        shift and go to state 155
    PLUS            reduce using rule 28 (primitive -> NUM_INT .)
    MINUS           reduce using rule 28 (primitive -> NUM_INT .)
    EQ              reduce using rule 28 (primitive -> NUM_INT .)
    GT              reduce using rule 28 (primitive -> NUM_INT .)
    LT              reduce using rule 28 (primitive -> NUM_INT .)

  ! RSQBRACK        [ reduce using rule 28 (primitive -> NUM_INT .) ]


state 142

    (26) step -> STEP DISTANCETO MATCH LSQBRACK expression . RSQBRACK
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    RSQBRACK        shift and go to state 156
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 143

    (21) step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT . STEP expression

    STEP            shift and go to state 157


state 144

    (22) step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT . STEP expression

    STEP            shift and go to state 158


state 145

    (47) statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    SEE             reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    HEALTH          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    FOR             reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    UNTIL           reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    RETURN          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    IDENTIFIER      reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    NOT             reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    LSQBRACK        reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    IF              reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    TURN            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    TURNTO          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    STEP            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    BEAVER          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    TURTLE          reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    NUM_INT         reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    TRUE            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    FALSE           reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    $end            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    COMMA           reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    ELSE            reduce using rule 47 (statement -> identifier LSQBRACK expression RSQBRACK EQUALS expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 146

    (63) statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR . statement_list COMMA
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement_list                 shift and go to state 159
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 147

    (56) statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .

    SAY             reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    SEE             reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    HEALTH          reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    FOR             reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    UNTIL           reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    RETURN          reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    IDENTIFIER      reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    NOT             reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    LSQBRACK        reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    IF              reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    TURN            reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    TURNTO          reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    STEP            reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    BEAVER          reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    TURTLE          reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    NUM_INT         reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    TRUE            reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    FALSE           reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    $end            reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    COMMA           reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)
    ELSE            reduce using rule 56 (statement -> expression POINT TIMES ARROW_LTR statement_list COMMA .)


state 148

    (57) statement -> FOR identifier IN BANANAS statement_list COMMA .

    SAY             reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    SEE             reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    HEALTH          reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    FOR             reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    UNTIL           reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    RETURN          reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    IDENTIFIER      reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    NOT             reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    LSQBRACK        reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    IF              reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    TURN            reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    TURNTO          reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    STEP            reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    BEAVER          reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    TURTLE          reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    NUM_INT         reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    TRUE            reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    FALSE           reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    $end            reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    COMMA           reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)
    ELSE            reduce using rule 57 (statement -> FOR identifier IN BANANAS statement_list COMMA .)


state 149

    (58) statement -> FOR identifier IN TURTLES statement_list COMMA .

    SAY             reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    SEE             reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    HEALTH          reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    FOR             reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    UNTIL           reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    RETURN          reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    IDENTIFIER      reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    NOT             reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    LSQBRACK        reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    IF              reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    TURN            reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    TURNTO          reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    STEP            reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    BEAVER          reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    TURTLE          reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    NUM_INT         reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    TRUE            reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    FALSE           reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    $end            reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    COMMA           reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)
    ELSE            reduce using rule 58 (statement -> FOR identifier IN TURTLES statement_list COMMA .)


state 150

    (59) statement -> FOR identifier IN CROCODILES statement_list COMMA .

    SAY             reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    SEE             reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    HEALTH          reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    FOR             reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    UNTIL           reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    RETURN          reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    IDENTIFIER      reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    NOT             reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    LSQBRACK        reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    IF              reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    TURN            reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    TURNTO          reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    STEP            reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    BEAVER          reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    TURTLE          reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    NUM_INT         reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    TRUE            reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    FALSE           reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    $end            reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    COMMA           reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)
    ELSE            reduce using rule 59 (statement -> FOR identifier IN CROCODILES statement_list COMMA .)


state 151

    (60) statement -> FOR identifier IN MATCHES statement_list COMMA .

    SAY             reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    SEE             reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    HEALTH          reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    FOR             reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    UNTIL           reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    RETURN          reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    IDENTIFIER      reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    NOT             reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    LSQBRACK        reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    IF              reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    TURN            reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    TURNTO          reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    STEP            reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    BEAVER          reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    TURTLE          reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    NUM_INT         reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    TRUE            reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    FALSE           reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    $end            reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    COMMA           reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)
    ELSE            reduce using rule 60 (statement -> FOR identifier IN MATCHES statement_list COMMA .)


state 152

    (50) if_statement -> IF expression statement_list ELSE statement_list COMMA .

    SAY             reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    SEE             reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    HEALTH          reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    FOR             reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    UNTIL           reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    RETURN          reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    IDENTIFIER      reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    NOT             reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    LSQBRACK        reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    IF              reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    TURN            reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    TURNTO          reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    STEP            reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    BEAVER          reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    TURTLE          reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    NUM_INT         reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    TRUE            reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    FALSE           reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    $end            reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    COMMA           reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)
    ELSE            reduce using rule 50 (if_statement -> IF expression statement_list ELSE statement_list COMMA .)


state 153

    (23) step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .

    SAY             reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    SEE             reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    HEALTH          reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    FOR             reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    UNTIL           reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    RETURN          reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    IDENTIFIER      reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    NOT             reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    LSQBRACK        reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    IF              reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TURN            reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TURNTO          reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    STEP            reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    BEAVER          reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TURTLE          reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    NUM_INT         reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    TRUE            reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    FALSE           reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    $end            reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    COMMA           reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)
    ELSE            reduce using rule 23 (step -> STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK .)


state 154

    (24) step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .

    SAY             reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    SEE             reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    HEALTH          reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    UNTIL           reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    TURN            reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    TURNTO          reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    STEP            reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    BEAVER          reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    TURTLE          reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 24 (step -> STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK .)


state 155

    (25) step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .

    SAY             reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    SEE             reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    HEALTH          reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    FOR             reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    UNTIL           reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    RETURN          reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    IDENTIFIER      reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    NOT             reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    LSQBRACK        reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    IF              reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TURN            reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TURNTO          reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    STEP            reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    BEAVER          reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TURTLE          reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    NUM_INT         reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    TRUE            reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    FALSE           reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    $end            reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    COMMA           reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)
    ELSE            reduce using rule 25 (step -> STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK .)


state 156

    (26) step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .

    SAY             reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    SEE             reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    HEALTH          reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    FOR             reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    UNTIL           reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    RETURN          reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    IDENTIFIER      reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    NOT             reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    LSQBRACK        reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    IF              reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    TURN            reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    TURNTO          reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    STEP            reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    BEAVER          reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    TURTLE          reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    NUM_INT         reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    TRUE            reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    FALSE           reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    $end            reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    COMMA           reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)
    ELSE            reduce using rule 26 (step -> STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK .)


state 157

    (21) step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 160
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 158

    (22) step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (27) identifier -> . IDENTIFIER
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IDENTIFIER      shift and go to state 15
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 161
    identifier                     shift and go to state 29
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 159

    (63) statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list . COMMA
    (2) statement_list -> statement_list . statement
    (3) statement -> . identifier
    (4) statement -> . expression
    (5) statement -> . if_statement
    (6) statement -> . turn
    (7) statement -> . step
    (47) statement -> . identifier LSQBRACK expression RSQBRACK EQUALS expression
    (51) statement -> . SAY LPAREN RPAREN
    (52) statement -> . SEE LPAREN RPAREN
    (53) statement -> . HEALTH LPAREN RPAREN
    (56) statement -> . expression POINT TIMES ARROW_LTR statement_list COMMA
    (57) statement -> . FOR identifier IN BANANAS statement_list COMMA
    (58) statement -> . FOR identifier IN TURTLES statement_list COMMA
    (59) statement -> . FOR identifier IN CROCODILES statement_list COMMA
    (60) statement -> . FOR identifier IN MATCHES statement_list COMMA
    (61) statement -> . UNTIL expression statement_list COMMA
    (62) statement -> . UNTIL NEAR MATCH statement_list COMMA
    (63) statement -> . identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA
    (64) statement -> . RETURN expression
    (66) statement -> . identifier arguments COMMA
    (27) identifier -> . IDENTIFIER
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (37) expression -> . NOT expression
    (45) expression -> . LSQBRACK arguments RSQBRACK
    (46) expression -> . identifier LSQBRACK expression RSQBRACK
    (48) expression -> . identifier EQUALS assignable
    (54) expression -> . primitive
    (55) expression -> . identifier
    (65) expression -> . identifier LPAREN arguments RPAREN
    (49) if_statement -> . IF expression statement_list COMMA
    (50) if_statement -> . IF expression statement_list ELSE statement_list COMMA
    (8) turn -> . TURN LEFT
    (9) turn -> . TURN RIGHT
    (10) turn -> . TURN NUM_INT
    (11) turn -> . expression POINT TURNTO expression
    (12) turn -> . TURNTO BANANA LSQBRACK NUM_INT RSQBRACK
    (13) turn -> . TURNTO BANANA LSQBRACK expression RSQBRACK
    (14) turn -> . TURNTO MATCH LSQBRACK NUM_INT RSQBRACK
    (15) turn -> . TURNTO MATCH LSQBRACK expression RSQBRACK
    (16) turn -> . TURNTO expression
    (17) step -> . STEP expression
    (18) step -> . STEP MINUS expression
    (19) step -> . STEP DISTANCETO expression
    (20) step -> . expression POINT STEP expression
    (21) step -> . BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (22) step -> . TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression
    (23) step -> . STEP DISTANCETO BANANA LSQBRACK NUM_INT RSQBRACK
    (24) step -> . STEP DISTANCETO BANANA LSQBRACK expression RSQBRACK
    (25) step -> . STEP DISTANCETO MATCH LSQBRACK NUM_INT RSQBRACK
    (26) step -> . STEP DISTANCETO MATCH LSQBRACK expression RSQBRACK
    (28) primitive -> . NUM_INT
    (29) primitive -> . boolean
    (32) boolean -> . boolean AND boolean
    (33) boolean -> . boolean OR boolean
    (34) boolean -> . expression EQ expression
    (35) boolean -> . expression GT expression
    (36) boolean -> . expression LT expression
    (38) boolean -> . TRUE
    (39) boolean -> . FALSE

    COMMA           shift and go to state 162
    SAY             shift and go to state 9
    SEE             shift and go to state 10
    HEALTH          shift and go to state 11
    FOR             shift and go to state 12
    UNTIL           shift and go to state 13
    RETURN          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    NOT             shift and go to state 16
    LSQBRACK        shift and go to state 8
    IF              shift and go to state 18
    TURN            shift and go to state 19
    TURNTO          shift and go to state 21
    STEP            shift and go to state 22
    BEAVER          shift and go to state 23
    TURTLE          shift and go to state 24
    NUM_INT         shift and go to state 20
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    identifier                     shift and go to state 3
    statement                      shift and go to state 28
    expression                     shift and go to state 4
    if_statement                   shift and go to state 5
    turn                           shift and go to state 6
    step                           shift and go to state 7
    primitive                      shift and go to state 17
    boolean                        shift and go to state 25

state 160

    (21) step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    SEE             reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    HEALTH          reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    FOR             reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    UNTIL           reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    RETURN          reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    IDENTIFIER      reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    NOT             reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    LSQBRACK        reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    IF              reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TURN            reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TURNTO          reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    STEP            reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    BEAVER          reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TURTLE          reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    NUM_INT         reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TRUE            reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    FALSE           reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    $end            reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    COMMA           reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    ELSE            reduce using rule 21 (step -> BEAVER LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 161

    (22) step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (34) boolean -> expression . EQ expression
    (35) boolean -> expression . GT expression
    (36) boolean -> expression . LT expression

    SAY             reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    SEE             reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    HEALTH          reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    FOR             reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    UNTIL           reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    RETURN          reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    IDENTIFIER      reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    NOT             reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    LSQBRACK        reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    IF              reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TURN            reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TURNTO          reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    STEP            reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    BEAVER          reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TURTLE          reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    NUM_INT         reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    TRUE            reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    FALSE           reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    $end            reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    COMMA           reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    ELSE            reduce using rule 22 (step -> TURTLE LSQBRACK NUM_INT RSQBRACK POINT STEP expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    EQ              shift and go to state 38
    GT              shift and go to state 39
    LT              shift and go to state 40


state 162

    (63) statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .

    SAY             reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    SEE             reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    HEALTH          reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    FOR             reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    UNTIL           reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    RETURN          reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    IDENTIFIER      reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    NOT             reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    LSQBRACK        reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    IF              reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    TURN            reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    TURNTO          reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    STEP            reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    BEAVER          reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    TURTLE          reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    NUM_INT         reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    TRUE            reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    FALSE           reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    $end            reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    COMMA           reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)
    ELSE            reduce using rule 63 (statement -> identifier EQUALS LPAREN arguments RPAREN ARROW_LTR statement_list COMMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQBRACK in state 3 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for AND in state 25 resolved as shift
WARNING: shift/reduce conflict for OR in state 25 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for EQ in state 49 resolved as shift
WARNING: shift/reduce conflict for GT in state 49 resolved as shift
WARNING: shift/reduce conflict for LT in state 49 resolved as shift
WARNING: shift/reduce conflict for RSQBRACK in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT in state 72 resolved as shift
WARNING: shift/reduce conflict for LSQBRACK in state 72 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 72 resolved as shift
WARNING: shift/reduce conflict for NUM_INT in state 72 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 72 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for RSQBRACK in state 117 resolved as shift
WARNING: shift/reduce conflict for RSQBRACK in state 119 resolved as shift
WARNING: shift/reduce conflict for RSQBRACK in state 139 resolved as shift
WARNING: shift/reduce conflict for RSQBRACK in state 141 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (statement -> identifier)
WARNING: rejected rule (expression -> identifier) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (statement -> identifier)
WARNING: rejected rule (arguments -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 69 resolved using rule (assignable -> primitive)
WARNING: rejected rule (expression -> primitive) in state 69
WARNING: reduce/reduce conflict in state 98 resolved using rule (primitive -> boolean)
WARNING: rejected rule (boolean -> boolean AND boolean) in state 98
WARNING: reduce/reduce conflict in state 100 resolved using rule (primitive -> boolean)
WARNING: rejected rule (boolean -> boolean OR boolean) in state 100
